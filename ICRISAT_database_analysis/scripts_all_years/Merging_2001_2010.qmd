---
title: "Fichier 1 : Créer la base Cultivation de 2001 à 2008 - GENERATION II"
format: html
editor: source
params:
  annee: 2008  # par défaut
---

```{r cleaning}
#| message: false
rm(list = setdiff(ls(), "params"))
graphics.off()
cat("\014")
```

```{r}
#| message: false
here::i_am("ICRISAT_database_analysis/scripts_all_years/Mergng_2001_2010.qmd")
library(dplyr)
library(tidyr)
library(knitr)
library(readxl)
library(stringr)
library(stringdist)
library(ggplot2)
library(here)
```


A FAIRE : manque CASTE_GROUP dans 2005 -> créer un tableau de correspondance simailire à TYPE_MAT en se basant sur les castes des autres années 

********************************************************************************

# Années 2005 - 2006 - 2008

## Importer les données

```{r params_annee}
#| message: false
#| warning: false
here::i_am("ICRESAT_database_analysis/Merging_2001_2010.qmd")

# Récupérer l'année depuis les paramètres
annee <- params$annee
cat("Année :", annee, "\n")
```

```{r import_data, message=FALSE, warning=FALSE}
charger_fichier <- function(zone, type, annee, suffix = ".xlsx") {
  nom_fichier <- paste0(zone, "_", type, "_", annee, suffix)
  read_excel(here("raw_data", nom_fichier))
}

CultInput        <- charger_fichier("GEN II", "CultInput", annee)
CultOutput       <- charger_fichier("GEN II", "CultOutput", annee)
Landholding      <- charger_fichier("GEN II", "Landholding", annee)
Household_info   <- charger_fichier("GEN II", "Household", annee)
```

```{r upper_titles}
# Mettre les titres des variables en majuscule
names(CultInput)        <- toupper(names(CultInput))
names(CultOutput)       <- toupper(names(CultOutput))
names(Household_info)   <- toupper(names(Household_info))
names(Landholding)      <- toupper(names(Landholding))
```

```{r rename_cols}
# Fonction pour renommer les variables
rename_if_exists <- function(df, old, new) {
  if (old %in% names(df)) {
    df <- rename(df, !!new := !!sym(old))
  }
  df
}

Landholding <- rename_if_exists(Landholding, "SOIL_FERTILITY", "SOIL_FERT")
Landholding <- rename_if_exists(Landholding, "SOIL_DEGRADATION", "SOIL_DEGR")
Landholding <- rename_if_exists(Landholding, "CULT_AREA", "CROP_AREA")
Landholding <- rename_if_exists(Landholding, "TOT_AREA", "PLOT_AREA")
Landholding <- rename_if_exists(Landholding, "HHID", "VDS_ID")
CultOutput  <- rename_if_exists(CultOutput, "GRAIN_QTY", "OP_MAIN_PROD_QTY")
CultOutput  <- rename_if_exists(CultOutput, "GRAIN_UNIT", "OP_MAIN_PROD_UNIT")
Household_info  <- rename_if_exists(Household_info, "HHID", "VDS_ID")
```

```{r add_missing_cols}
# Fonction pour créer des variables si manquantes
create_if_missing <- function(data, var_name, default_value = NA) {
  if (!(var_name %in% names(data))) {
    data[[var_name]] <- default_value
  }
  return(data)
}

CultOutput <- create_if_missing(CultOutput, "OP_MAIN_PROD_QTY", default_value = NA_real_)
CultOutput <- create_if_missing(CultOutput, "OP_MAIN_PROD_UNIT", default_value = NA_character_)
```


********************************************************************************

## Nettoyage des tables

### Sélectionner les variables

J'ajoute la variable VDS_ID à partir de CULT_ID pour que la variable soit présente dans toutes les tables. 

```{r add_VDS_ID}
add_VDS_ID <- function(df) {
  if (!"VDS_ID" %in% names(df)) {
    df <- df |>
      mutate(VDS_ID = str_extract(CULT_ID, "^[A-Z0-9]{3,5}(?=/)"))
  }
  return(df)
}

CultInput    <- add_VDS_ID(CultInput)
CultOutput   <- add_VDS_ID(CultOutput)
```

```{r select_vars}
CultInput <- CultInput |>
  select(SUR_YR, VDS_ID, PLOT_CODE, CROP_AREA, SEASON, DT_OPER, OPERATION, LAB_TYPE, WORK_HR, WAGE, NAME_MAT, QTY_MAT, UNIT_MAT, VAL_MAT, RATE_MAT, SOURCE_MAT) |>
  rename(SUB_PLOT_CODE = PLOT_CODE) |>
  mutate(PLOT_CODE = substr(SUB_PLOT_CODE, 1, 1),
         across(everything(), toupper))

CultOutput <- CultOutput |>
  select(VDS_ID, PLOT_CODE, CROP_AREA, SEASON, CROP, VAR_TYPE, VAR_NAME, PRCT_AREA, OP_MAIN_PROD_UNIT, OP_MAIN_PROD_QTY) |>
  rename(SUB_PLOT_CODE = PLOT_CODE) |>
  mutate(across(everything(), toupper))

Landholding <- Landholding |>
  select(VDS_ID, PLOT_CODE, PLOT_AREA, CROP_AREA, IRRI_AREA, SOIL_TYPE, SOIL_DEPTH, SOIL_FERT, SLOPE, SOIL_DEGR) |>
  rename(SUB_PLOT_CODE = PLOT_CODE) |>
  mutate(PLOT_CODE = substr(SUB_PLOT_CODE, 1, 1))

Household_info <- Household_info |>
  select(VDS_ID, CASTE, CASTE_GROUP) |>
  mutate(across(everything(), toupper))
```

```{r num_vars}
# Convertir et arrondir les superficies à la deuxième décimale
convertir_arrondir <- function(df, cols) {
  df[cols] <- lapply(df[cols], function(x) round(as.numeric(as.character(x)), 2))
  return(df)
}

CultInput     <- convertir_arrondir(CultInput,  "CROP_AREA")
CultOutput    <- convertir_arrondir(CultOutput, "CROP_AREA")
Landholding   <- convertir_arrondir(Landholding, c("IRRI_AREA", "CROP_AREA"))
```

********************************************************************************

### Harmoniser les variables

#### Noms des cultures

```{r table_crops}
# Table de correspondance des cultures
correspondances_crop <- tribble(
  ~CULTURE_VARIANT,      ~CULTURE_STANDARD,
  "BAMBOO TREE",         "BAMBOO",
  "BLACK GRAM",          "BLACKGRAM",
  "GREEN GRAM",          "BLACKGRAM",
  "GREENGRAM",           "BLACKGRAM",
  "MAIZE FODDER",        "MAIZE",
  "CHICK PEA",           "CHICKPEA",
  "CHIKPEA",             "CHICKPEA",
  "FELLOW",              "SEASONAL FALLOW",
  "FALLOW",              "SEASONAL FALLOW",
  "GROUND NUT",          "GROUNDNUT",
  "HORSE GRAM",          "HORSEGRAM",
  "TURMARIC",            "TURMURIC",
  "MANGO TREE",          "MANGO",
  "MANGOES",             "MANGO",
  "MANGOES TREE",        "MANGO",
  "MANGO ORCHARD",       "MANGO",
  "JUNGLE",              "JUNGLE TREE",
  "MUSTERD",             "MUSTARD",
  "MUSTURD",             "MUSTARD",
  "MASTURD",             "MUSTARD",
  "PAADY",               "PADDY",
  "PADDY  SEEDLING",     "PADDY",
  "PADDY GODA",          "PADDY",
  "PADDY NURSURY",       "PADDY",
  "PADDY SEED",          "PADDY",
  "PADDY SEEDLING",      "PADDY",
  "PADDY(SEEDLING)",     "PADDY",
  "PADDY LOCAL",         "PADDY",
  "PADY",                "PADDY",
  "PIGEON PEA",          "PIGEONPEA",
  "PIGION PEA",          "PIGEONPEA",
  "POTATAO",             "POTATO",
  "SORGHUM FODDER",      "SORGHUM",
  "LIN SEED",            "LINSEED",
  "FODDER (EGYPTIAN CLOVER)","EGYPTIAN CLOVER",
  "BERSEEM",             "EGYPTIAN CLOVER",
  "OATS (JAI)",          "JAI",
  "OTS",                 "JAI",
  "FODDER OATS (JAI)",   "JAI",
  "GREEN FODDER JAI",    "JAI",
  "GREEN FODDER (JANER)","GREEN FODDER",
  "SMALL MILLET (MARUA)","MARUA",
  "FRENCH BEANS",        "BEANS",
  "FREANCH BEANS",       "BEANS",
  "SMALL MILLET (SARGUJA)","SARGUJA",
  "CHILLIES GREEN",      "CHILLIES",
  "CHILLI GREEN",        "CHILLIES",
  "GREEN CHILLY",        "CHILLIES",
  "PEA",                 "PEAS",
  "SESBANIA ACULEATA (DHAICHA)","DHAICHA",
  "LADYSFINGER",         "LADYS FINGER",
  "LEAFY VEGETABLE",     "LEAFY",
  "VEGETABLE",           "LEAFY",
  "CORIENDER",           "CORIANDER",
  "RIDGEGOURD",          "RIDGE GOURD",
  "WHEET",               "WHEAT"
)
```

```{r apply_table_crops}
# CultOuput : Appliquer les cultures harmonisées à CROP
CultOutput <- CultOutput |>
  left_join(correspondances_crop, by = c("CROP" = "CULTURE_VARIANT")) |>
  mutate(CROP = if_else(!is.na(CULTURE_STANDARD), CULTURE_STANDARD, CROP)) |>
  select(-CULTURE_STANDARD)
```


#### Opérations

*1. Simplifier le nom des opérations*

```{r table_suboperations}
# Liste des opérations principales
key_operations <- c(
  
  # BUNDING
  "BUND", "WATER CHANNEL",  "BASIN",
  
  # DIGGING
  "DIGGING", "LINING", "LINES", "FILLING", "TRENCHING", "PITTING", "LINE MAKING",
  
  # UPROOTING
  "UPROOTING", 
  
  # LAND PREPARATION
  "LAND PREPARATION", "FIELD PREPARATION", "PLOUGHING", "PUDDLING", "EARTHING UP", "BED PREPARATION", "BEEDING", "FURROW", "SOIL UP", "PANJI", "PUNJI", "BROAD CASTING", "ROTAVATOR", "PHANTAN", "V-PASS", "CANAL PREPARATION", "LEVELING", "LEVELLING",
  
  # DIPPING
  "DIPPING", "DRENCHING",
  
  # SOWING
  "SOWING", "SEED",
  
  # HERBICIDE
  "HERBICIDE", "WEEDICIDE", "HARBISIDE",
  
  # HAND WEEDIND
  "HAND WEEDING",
  
  # FIELD CLEANING
  "FIELD CLEANING", "GRASS CLEANING", "SIDE CLEANING", "CLEANING AND WEEDING", "WEEDING AND CLEANING", "CLEANING WEED", 
  
  # HARVESTING/THRESHING
  "HARVEST", "THRESHING", "THRASHING",
  
  # WINNOWING
  "WINNOWING",
  
  # FENCE TRIMMING
  "FENCE", "FENCING", 
  
  # MANURING
  "MULCHING", "MANURING", 
  
  # PINCHING/CUTTING
  "PINCHING", "PRUNING", "CUTTING", "AIR LAYERING", "NIPPING",
  
  # INTERCULTURE
  "INTERCULTURE", "HOEING", "PLUCKING", "THINNING", "BEDICIDE", "BINDING",
  
  # TRANSPLANTING
  "TRANSPLANTING", "PLANTING", "PLANTATION",
  
  # TRANSPORT
  "TRANSPORT", "LOADING", "STACKING", "PACKING", "CARRY",
  
  # IRRIGATION
  "IRRIGATION", "PIPELINE",
  
  # SUPERVISION
  "SUPERVISION", "WATCHING",
  
  # GRADING/TAGGING
  "GRADING", "TAGGING", 
  
  # MARKETING
  "MARKETING", "MAKING BY PRODUCT", "LABELING",
  
  # GIRDLING
  "GIRDLING", "GRIDLING",
  
  # NURSERY RAISING
  "NURSERY RAISING",
  
  # TRANSFORMATION
  "TRANSFORMATION", "PROCESSING", "REMOVING",
  
  # OTHERS
  "CURING", "COLLECTION",
  
  # PLANT PROTECTION
  "PLANT PROTECTION", "BAGGING", "ASH", "FUMIGATION",
   
  # PESTICIDE
  "PESTICIDE", "SPRAY", "FUNGICIDE", "INSECTICIDE", "DEFOLIATION", "IPM AND IDM",
  
  # FERTILIZER
  "FERTILIZER", "FERTILIZING", "FERTIGATION", "FYM", "COMPOST", "NUTRIENT", "HORMONE", "SULPHUR", "VITAMIN")

pattern_oper <- paste(key_operations, collapse = "|")

CultInput <- CultInput |>
  mutate(OPERATION = if_else(
    str_detect(str_to_upper(OPERATION), pattern_oper),
    str_extract(str_to_upper(OPERATION), pattern_oper),
    OPERATION
  ))
```

*2. Regrouper les opérations*

```{r table_operations}
# Regrouper les opérations en principales opérations
correspondances_oper <- tribble(
  ~OPERATION_VARIANT,                             ~OPERATION_STANDARD,
  
  # LAND PREPARATION
  "LAND PREPARATION",                             "LAND PREPARATION",
  "FIELD PREPARATION",                            "LAND PREPARATION",
  "BEEDING",                                      "LAND PREPARATION",
  "BED PREPARATION",                              "LAND PREPARATION",
  "BED PREPRATION",                               "LAND PREPARATION",
  "PREPARATION OF BED",                           "LAND PREPARATION",
  "FURROW",                                       "LAND PREPARATION",
  "EARTHING UP",                                  "LAND PREPARATION",
  "SOIL UP",                                      "LAND PREPARATION",
  "SOIL SPREADING",                               "LAND PREPARATION",
  "PLOUGHING",                                    "LAND PREPARATION",
  "PUDDLING",                                     "LAND PREPARATION",
  "PLUGHING",                                     "LAND PREPARATION",
  "PANJI",                                        "LAND PREPARATION",
  "PUNJI",                                        "LAND PREPARATION",
  "HARROWING",                                    "LAND PREPARATION",
  "BROAD CASTING",                                "LAND PREPARATION",
  "PHANTAN",                                      "LAND PREPARATION",
  "V-PASS",                                       "LAND PREPARATION",
  "MAKING RIDGES & FURROWS",                      "LAND PREPARATION",
  "ROTAVATOR",                                    "LAND PREPARATION",
  "CANAL PREPARATION",                            "LAND PREPARATION",
  
  # LEVELING
  "LEVELING",                                     "LEVELING",
  "LEVELLING",                                    "LEVELING",
  
  # BUNDING
  "BUND",                                         "BUNDING",
  "WATER CHANNEL",                                "BUNDING",
  "WATERING",                                     "BUNDING",
  "BASIN",                                        "BUNDING",
  
  # DIGGING
  "DIGGING",                                      "DIGGING",
  "FILLING",                                      "DIGGING",
  "LINES",                                        "DIGGING",
  "LINING",                                       "DIGGING",
  "LINE MAKING",                                  "DIGGING",
  "PITTING",                                      "DIGGING",
  "TRENCHING",                                    "DIGGING",
  
  # INTERCULTURE
  "INTERCULTURE",                                 "INTERCULTURE",
  "HOEING",                                       "INTERCULTURE",
  "PLUCKING",                                     "INTERCULTURE",
  "THINNING",                                     "INTERCULTURE",
  "BEDICIDE",                                     "INTERCULTURE",
  "BINDING",                                      "INTERCULTURE",
  "FENCING",                                      "INTERCULTURE",
  "FENCE",                                        "INTERCULTURE",
  "GRIDLING",                                     "INTERCULTURE",
  "GIRDLING",                                     "INTERCULTURE",
  
  # MANURING
  "MANURING",                                     "MANURING",
  "MULCHING",                                     "MANURING",
  
  # PINCHING/CUTTING
  "PRUNING",                                      "PINCHING/CUTTING",
  "PINCHING",                                     "PINCHING/CUTTING",
  "CUTTING",                                      "PINCHING/CUTTING",
  "NIPPING",                                      "PINCHING/CUTTING",
  "AIR LAYERING",                                 "PINCHING/CUTTING",
  
  # UPROOTING
  "UPROOTING",                                    "UPROOTING",
  
  # FIELD CLEANING
  "GRASS CLEANING",                               "FIELD CLEANING",
  "FIELD CLEANING",                               "FIELD CLEANING",
  "SIDE CLEANING",                                "FIELD CLEANING",
  "CLEANING WEED",                                "FIELD CLEANING",
  "CLEANING AND WEEDING",                         "FIELD CLEANING",
  "WEEDING AND CLEANING",                         "FIELD CLEANING",
  "CLEANING",                                     "FIELD CLEANING",
  
  # TRANSPLANTING
  "TRANSPLANTING",                                "TRANSPLANTING",
  "PLANTING",                                     "TRANSPLANTING",
  "PLANTATION",                                   "TRANSPLANTING",
  
  # SOWING
  "SOWING",                                       "SOWING",
  "SEED",                                         "SOWING",
  "DRENCHING",                                    "SOWING",
  "DIPPING",                                      "SOWING",
  
  # PLANT PROTECTION
  "PLANT PROTECTION",                             "PLANT PROTECTION",
  "BAGGING",                                      "PLANT PROTECTION",
  "ASH",                                          "PLANT PROTECTION",
  
  # PESTICIDE
  "FUMIGATION",                                   "PESTICIDE",
  "SPRAY",                                        "PESTICIDE",
  "FUNGICIDE",                                    "PESTICIDE",
  "INSECTICIDE",                                  "PESTICIDE",
  "DEFOLIATION",                                  "PESTICIDE",
  "IPM AND IDM",                                  "PESTICIDE",
  
  # HERBICIDE
  "HERBICIDE",                                    "HERBICIDE",
  "WEEDICIDE",                                    "HERBICIDE",
  "HARBISIDE",                                    "HERBICIDE",
  "HARBICIDE",                                    "HERBICIDE",
  
  # FERTILIZER
  "FERTILIZER",                                   "FERTILIZER APPL.",
  "FERTIGATION",                                  "FERTILIZER APPL.",
  "FERTILIZING",                                  "FERTILIZER APPL.",
  "FYM",                                          "FERTILIZER APPL.",
  "COMPOST",                                      "FERTILIZER APPL.",
  "NUTRIENT",                                     "FERTILIZER APPL.",
  "TILIZER APPLICATION",                          "FERTILIZER APPL.",
  "HORMONE",                                      "FERTILIZER APPL.",
  "HARMONE APPLICATION",                          "FERTILIZER APPL.",
  "SULPHUR",                                      "FERTILIZER APPL.",
  "VITAMIN",                                      "FERTILIZER APPL.",
  
  # HARVESTINGTHRESHING
  "HARVEST",                                      "HARVESTING",
  
  # THRESHING
  "THRASHING",                                    "THRESHING",
  "THRESHING",                                    "THRESHING",
  
  # WINNOWING
  "WINNOWING",                                    "WINNOWING",
  
  # MARKETING
  "MARKETING",                                    "MARKETING",
  "MAKING BY PRODUCT",                            "MARKETING",
  "LABELING",                                     "MARKETING",
  "LABLING",                                      "MARKETING",
  "ABELING",                                      "MARKETING",
  "TAGGING",                                      "MARKETING",
  
  # SUPERVISION
  "SUPERVISION",                                  "SUPERVISION",
  "WATCHING",                                     "SUPERVISION",
  
  # IRRIGATION
  "IRRIGATION",                                   "IRRIGATION",
  "PIPELINE",                                     "IRRIGATION",
  
  # HAND WEEDING
  "HAND WEEDING",                                 "HAND WEEDING",
  "WEEDING",                                      "WEEDING",
  
  # NURSERY RAISING
  "NURSERY RAISING",                              "NURSERY RAISING",
  
  # TRANSPORT
  "TRANSPORT",                                    "TRANSPORT",
  "LOADING",                                      "TRANSPORT",
  "CARRY",                                        "TRANSPORT",
  "STACKING",                                     "TRANSPORT",
  "PACKING",                                      "TRANSPORT",

  # OTHERS
  "OTHERS",                                       "OTHERS",
  "CURING",                                       "OTHERS",
  "COLLECTION",                                   "OTHERS",
  "TRANSFORMATION",                               "OTHERS",
  "PROCESSING",                                   "OTHERS",
  "REMOVING",                                     "OTHERS",
  "GRADING",                                      "OTHERS"
)
```

```{r apply_table_suboper}
# CultInput : Appliquer les opérations harmonisées
CultInput <- CultInput |>
  left_join(correspondances_oper, by = c("OPERATION" = "OPERATION_VARIANT")) |>
    mutate(
    OPERATION = case_when(
      !is.na(OPERATION_STANDARD) ~ OPERATION_STANDARD,
      TRUE ~ "OTHERS"
    )
  ) |>
  select(-OPERATION_STANDARD)
```


*3. Créer les catégories principales*

```{r categories_operations}
# Nouvelles catégories OPERATION
cat_operations <- tribble(
  ~SUB_OPERATION,        ~OPERATION,

  "HAND WEEDING",        "WEEDING",
  "WEEDING",             "WEEDING",
  "FIELD CLEANING",      "WEEDING",
  "HERBICIDE",           "WEEDING",
  "HARVESTING",          "HARVESTING & THRESHING",
  "THRESHING",           "HARVESTING & THRESHING",
  "WINNOWING",           "HARVESTING & THRESHING",
  "INTERCULTURE",        "INTERCULTURE",
  "PINCHING/CUTTING",    "INTERCULTURE",
  "MANURING",            "INTERCULTURE",
  "IRRIGATION",          "IRRIGATION",
  "LAND PREPARATION",    "LAND PREPARATION",
  "BUNDING",             "LAND PREPARATION",
  "DIGGING",             "LAND PREPARATION",
  "LEVELING",            "LAND PREPARATION",
  "MARKETING",           "MARKETING",
  "SOWING",              "SEED SOWING",
  "TRANSPLANTING",       "TRANSPLANTING",
  "UPROOTING",           "TRANSPLANTING",
  "PLANT PROTECTION",    "PLANT PROTECTION MEASURES",
  "PESTICIDE",           "PLANT PROTECTION MEASURES",
  "FERTILIZER APPL.",    "FERTILIZER APPL.",
  "SUPERVISION",         "SUPERVISION",
  "TRANSPORT",           "TRANSPORT",
  "NURSERY RAISING",     "NURSERY RAISING",
  "OTHERS",              "OTHERS"
)

# Ajouter les opérations recatégorisées
CultInput <- CultInput |>
  rename(SUB_OPERATION = OPERATION) |>
  left_join(cat_operations, by = "SUB_OPERATION") |>
  relocate(OPERATION, .after = DT_OPER)
```


********************************************************************************

### Gérer les doublons

#### CultInput

*Lignes identiques dans CultInput*

```{r dup_cultinput}
dup_CultInput <- CultInput |>
  group_by(across(everything())) |>
  filter(n() > 1) |>
  mutate(row_id = row_number()) |> 
  ungroup()
```

ATTENTION : Que faire des lignes identiques ? Est-ce qu'on considère que ce sont des lignes en double ou que cela représente des travailleurs distincts ?


*Diviser CultInput en 2 parties*

Pour éliminer les doublons pour le calcul des heures de travail, je différencie la base CultInput en deux parties en se basant sur le questionnaire : l'une sur le travail (human and bullock labor), la deuxième sur la mécanisation (Machinery inputs and machinery use).

```{r divide_cultinput}
CultInput_MAT <- CultInput |>
  select(-c(LAB_TYPE, WORK_HR, WAGE)) |>
  filter(!is.na(NAME_MAT), NAME_MAT != 0)

CultInput_LAB <- CultInput |>
  select(-c(NAME_MAT, UNIT_MAT, QTY_MAT, RATE_MAT, VAL_MAT, SOURCE_MAT)) |>
  filter(!is.na(WORK_HR), !is.na(LAB_TYPE))
```


##### Labor

```{r}
# Arrondir WORK_HR à la première décimale (il y a des doublons créés à cause de cela)
CultInput_LAB$WORK_HR <- as.numeric(as.character(CultInput_LAB$WORK_HR))
CultInput_LAB$WORK_HR <- round(CultInput_LAB$WORK_HR, 1)
CultInput_LAB$WAGE <- as.numeric(as.character(CultInput_LAB$WAGE))
```

Je vérifie si les doublons de WORK_HR dans CultInput_LAB sont dûs à des salaires différents et pourraient donc représenter des travailleurs distincts. On identifie les doublons pour lesquels les différences entre temps de travail et salaire sont cohérentes. 

*Gérer les doublons*

```{r}
# Additionner les lignes identiques
n_avant <- nrow(CultInput_LAB)
CultInput_LAB <- CultInput_LAB |>
  group_by(across(everything())) |>
  summarise(WORK_HR = sum(WORK_HR),
            WAGE = sum(WAGE),
            .groups = "drop")

n_avant - nrow(CultInput_LAB)
```

Je vérifie si les doublons de WORK_HR dans CultInput_LAB sont dûs à des salaires différents et pourraient donc représenter des travailleurs distincts. On identifie les doublons pour lesquels les différences entre temps de travail et salaire sont cohérentes. 

```{r table_dup_wage}
# Tableau des doublons par rapport à WORK_HR et WAGE
dup_CultInput_LAB <- CultInput_LAB |>
  group_by(across(-c(WAGE, WORK_HR))) |>
  filter(n() > 1) |>
  mutate(row_id = row_number()) |> 
  filter(!is.na(WAGE)) |>
  ungroup() |>

# Créer la variable comparison pour vérifier la cohérence de WORK_HR et WAGE entre chaque doublon
  mutate(
    WAGE = as.numeric(WAGE),
    WORK_HR = as.numeric(WORK_HR)
  ) |>
  pivot_wider(
    names_from = row_id,
    values_from = c(WAGE, WORK_HR),
    names_glue = "{.value}_row{row_id}"
  ) |>
  mutate(
    wage_diff = WAGE_row1 - WAGE_row2,
    work_hr_diff = WORK_HR_row1 - WORK_HR_row2,
    comparison = sign(wage_diff) == sign(work_hr_diff) & wage_diff != 0
)

cat("Nombre de doublons avec un salaire et un temps de travail cohérents :", nrow(dup_CultInput_LAB |> filter(comparison)), "\n")
cat("Sur un total de", nrow(dup_CultInput_LAB), "doublons soit", round(100 * nrow(dup_CultInput_LAB |> filter(comparison)) / nrow(dup_CultInput_LAB), 1), "%\n")
```

```{r delete_dup_wage, warning=FALSE, message=FALSE}
# Supprimer les doublons entre WAGE et WORK_HR quand les salaires et les heures de travail ne sont pas cohérents (en conservant le nombre le plus haut)
dup_CultInput_LAB <- dup_CultInput_LAB |>
  select(VDS_ID, SUB_PLOT_CODE, CROP_AREA, SEASON, DT_OPER, OPERATION, LAB_TYPE, comparison)

n_avant <- nrow(CultInput_LAB)
CultInput_LAB <- CultInput_LAB |>
  left_join(dup_CultInput_LAB, by = c("VDS_ID", "SUB_PLOT_CODE", "CROP_AREA", "SEASON", "DT_OPER", "OPERATION", "LAB_TYPE")) |>
  group_by(across(-c(WORK_HR, WAGE, comparison))) |>
  filter(is.na(comparison) | comparison | WAGE == max(WAGE, na.rm = TRUE)) |>
  select(-comparison) |>
  ungroup()
n_avant - nrow(CultInput_LAB)
```


*Additionner les heures de travail par opération et type de travail*

```{r sum_work_hr}
n_avant <- nrow(CultInput_LAB)
CultInput_LAB <- CultInput_LAB |>
  select(-SUB_OPERATION) |>           # SUB_OPERATION bloque le pivot wider
  group_by(across(-c(WAGE, WORK_HR))) |>
  summarise(
    WORK_HR = sum(WORK_HR, na.rm = TRUE),
    WAGE = sum(WAGE, na.rm = TRUE),
    .groups = "drop"
  ) |>
  mutate(HACRE = WORK_HR / CROP_AREA)   # Calculer les heures de travail par acre

n_avant - nrow(CultInput_LAB)
```


*Pivoter la table CultInput_LAB*

L'objectif est d'avoir pour chaque opération (même date d'opération), une seule ligne par champ indiquant les heures de travail par type de travail. Pour ce faire, je pivote en large la table CultInput_LAB.

```{r pivot_cultinput_lab}
CultInput_LAB <- CultInput_LAB |>
  pivot_wider(
    names_from = LAB_TYPE,
    values_from = c(WORK_HR, WAGE, HACRE),
    values_fill = list(WORK_HR = 0, WAGE = NA_real_, HACRE = 0),
    names_glue = "{.value}_{LAB_TYPE}"
  ) 
```


##### Machinery

```{r dups_cultinput_mat}
# Est-ce que des ménages ont utilisé plusieurs outils pour une même opération (même date d'opération) ? 
dup_CultInput_MAT <- CultInput_MAT |>
  group_by(VDS_ID, PLOT_CODE, SUB_PLOT_CODE, SEASON, OPERATION, DT_OPER) |>
  filter(n() > 1) |>
  mutate(row_id = row_number()) |> 
  ungroup()
```


*1. Créer la variable TYPE_MAT*

Je crée TYPE_MAT, en fonction de NAME_MAT (je ne peux pas me baser sur l'opération, car pour un même type d'opération, il peut avoir plusieurs outils utilisés). 

*1ère étape : Simplifier les noms de NAME_MAT*

```{r simplify_name_mat}
# Liste des principaux outils
key_tools <- c("FERTILIZER", "DAP", "UREA", "TOTAL", "FYM", "PESTICIDE", "NUTRIENT", "ICPH", "SEED", "TRACTOR", "SULPHATE", "AUTO", "WEEDICIDE", "MANURE", "PHORATE", "IRRIGATION", "CYCLOMETHYL", "MAROTI", "POTASH", "GOMOR", "SPRAY", "PHOSPHATE", "THRESHER", "DICHLORATE")

pattern_tools <- paste(key_tools, collapse = "|")

CultInput_MAT <- CultInput_MAT |>
  mutate(TYPE_MAT = NAME_MAT,
         TYPE_MAT = if_else(
    str_detect(str_to_upper(TYPE_MAT), pattern_tools),
    str_extract(str_to_upper(TYPE_MAT), pattern_tools),
    TYPE_MAT
  ))
```

*2ème étape : Regrouper les outils*

```{r table_typemat}
# Table de correspondance entre NAME_MAT et TYPE_MAT
correspondances_typemat <- tribble(
  ~NAME_MAT,             ~NEW_TYPE_MAT,
  "FERTILIZER",          "FERTILIZER",
  "UREA",                "FERTILIZER",
  "URE",                 "FERTILIZER",
  "URIA",                "FERTILIZER",
  "SPP",                 "FERTILIZER",
  "MOP",                 "FERTILIZER",
  "NPK",                 "FERTILIZER",
  "N.P.K",               "FERTILIZER",
  "SULPHATE",            "FERTILIZER",
  "AMMONIUM SULPHATE",   "FERTILIZER",
  "POUSHAK",             "FERTILIZER",
  "DAP",                 "FERTILIZER",
  "POTASH",              "FERTILIZER",
  "POTAS",               "FERTILIZER",
  "PATAS",               "FERTILIZER",
  "UREA, AMMONIUM",      "FERTILIZER",
  "UREA, POTASH",        "FERTILIZER",
  "UREA GOMOR",          "FERTILIZER",
  "GROWMORE",            "FERTILIZER",
  "SSP",                 "FERTILIZER",
  "GROMOR",              "FERTILIZER",
  "19-19-19",            "FERTILIZER",
  "BIPUL VITAMIN",       "FERTILIZER",
  
  "WEEDICIDE",           "WEEDICIDE",
  "PRITI HARBICIDE",     "WEEDICIDE",
  "IMAZETHAPYR 10% SL",  "WEEDICIDE",
  "ROUNDUP",             "WEEDICIDE",
  "MASCHETI",            "WEEDICIDE",
  "PURSUIT",             "WEEDICIDE",
  "2-4D",                "WEEDICIDE",
  "24D",                 "WEEDICIDE",
  "HEERA SUPER",         "WEEDICIDE",
  "PHOSPHATE",           "WEEDICIDE",
  "IMAZETHAPYR",         "WEEDICIDE",
  "HUNTER",              "WEEDICIDE",
  "TOTAL",               "WEEDICIDE",
  "BUTACLOUR",           "WEEDICIDE",
  "2-4D",                "WEEDICIDE",
  "2, 4D",               "WEEDICIDE",
  "SATHI",               "WEEDICIDE",
  "SAATHI",              "WEEDICIDE",
  "TOP STAR",            "WEEDICIDE",
  "BUTOCLOX",            "WEEDICIDE",
  "GOL",                 "WEEDICIDE",
  "ALLGRIP",             "WEEDICIDE",
  "TARGA SUPER",         "WEEDICIDE",
  "LAGAAM",              "WEEDICIDE",
  "PETICLOUR",           "WEEDICIDE",
  "REJAR",               "WEEDICIDE",
  "DANADAR",             "WEEDICIDE",
  "ROGOHTI",             "WEEDICIDE",
  "NOMNI GOLD",          "WEEDICIDE",
  "ANUGOR",              "WEEDICIDE",
  "JUDO",                "WEEDICIDE",
  
  
  "MACHINERY",           "MACHINERY",
  "TR",                  "MACHINERY",
  "T.R",                 "MACHINERY",
  "TRACTOR",             "MACHINERY",
  "SP",                  "MACHINERY",
  "SPRAYER",             "MACHINERY",
  "SPRAY",               "MACHINERY",
  "DS",                  "MACHINERY",
  "DUSTER",              "MACHINERY",
  "SM",                  "MACHINERY",
  "SUBMERSIBLE PUMP",    "MACHINERY",
  "PT",                  "MACHINERY",
  "POWER TILLER",        "MACHINERY",
  "CH",                  "MACHINERY",
  "C.H",                 "MACHINERY",
  "COMBINED HARVESTER",  "MACHINERY",
  "COMBINED HARVESTOR",  "MACHINERY",
  "HARVESTER",           "MACHINERY",
  "SD",                  "MACHINERY",
  "SEED DRILL",          "MACHINERY",
  "MK",                  "MACHINERY",
  "DP",                  "MACHINERY",
  "D.P",                 "MACHINERY",
  "DIESEL PUMP",         "MACHINERY",
  "KEROSENE PUMP",       "MACHINERY",
  "TH",                  "MACHINERY",
  "THRESHER",            "MACHINERY",
  "ET",                  "MACHINERY",
  "E.T",                 "MACHINERY",
  "ELECTRIC MOTOR",      "MACHINERY",
  "AUTO",                "MACHINERY",
  "TRUCK",               "MACHINERY",
  "WINNOWER",            "MACHINERY",
  
  "SEE",                 "SEED",
  "ONION",               "SEED",
  "ONIONS",              "SEED",
  "BEAN",                "SEED",
  "BEANS",               "SEED",
  "CHILLIES",            "SEED",
  "GREEN GRAM",          "SEED",
  "GREENGRAM",           "SEED",
  "WHEAT",               "SEED",
  "WHEET",               "SEED",
  "JAI",                 "SEED",
  "LENTIL",              "SEED",
  "FINGER MILLET",       "SEED",
  "MANSURI",             "SEED",
  "GANGOTRI",            "SEED",
  "KOMAL",               "SEED",
  "RUPALI",              "SEED",
  "PARVATI",             "SEED",
  "CHANDAN",             "SEED",
  "DHAICHA",             "SEED",
  "AMAN",                "SEED",
  "PIGEONPEA",           "SEED",
  "SOYBEAN",             "SEED",
  "CHICKPEA",            "SEED",
  "BLACKGRAM",           "SEED",
  "SORGHUM",             "SEED",
  "POTATO",              "SEED",
  "GARLIC",              "SEED",
  "PEAS",                "SEED",
  "MUSTARD",             "SEED",
  "MAIZE",               "SEED",
  "EGYPTYIN COLVER (BAESEEM)", "SEED",
  
  "PESTICIDE",           "PESTICIDE",
  "SUPER KILLER-10",     "PESTICIDE",
  "ROGORUS",             "PESTICIDE",
  "TATAMEDA",            "PESTICIDE",
  "THIMET-10-G",         "PESTICIDE",
  "FUNGICIDE",           "PESTICIDE",
  "FUNGISIDE",           "PESTICIDE",
  "MEDICINE",            "PESTICIDE",
  "INDOPHEN",            "PESTICIDE",
  "SP (SARK)",           "PESTICIDE",
  "SWARNA",              "PESTICIDE",
  "TRIAZOPHOS",          "PESTICIDE",
  "ROGAR",               "PESTICIDE",
  "PENDIMETHALIN",       "PESTICIDE",
  "PROCLAIM",            "PESTICIDE",
  "SHOOTER",             "PESTICIDE",
  "PROFIX SUPER",        "PESTICIDE",
  "IMIDACLOPRID",        "PESTICIDE",
  "ACEPHATE",            "PESTICIDE",
  "ANTRACOL",            "PESTICIDE",
  "MONOCROTOPHOS",       "PESTICIDE",
  "MONOCROTOPHOS 36% SL", "PESTICIDE",
  "DORMEX",              "PESTICIDE",
  "SULPHUR",             "PESTICIDE",
  "SONA POWDER",         "PESTICIDE",
  "CARBENDAIZM",         "PESTICIDE",
  "LANCER GOLD",         "PESTICIDE",
  "BIFENTHRIN",          "PESTICIDE",
  "TEBUCONAZOLE",        "PESTICIDE",
  "BOULD",               "PESTICIDE",
  "SAVILS",              "PESTICIDE",
  "FLONICAMID",          "PESTICIDE",
  "QUINALPHOS",          "PESTICIDE",
  "SAAF",                "PESTICIDE",
  "FENPROPATHRIN",       "PESTICIDE",
  "ERADICATOR",          "PESTICIDE",
  "COMBIPLUS",           "PESTICIDE",
  "PHORATE",             "PESTICIDE",
  "FIPRONIL",            "PESTICIDE",
  "PHENTHOATE",          "PESTICIDE",
  "EMAMECTIN BENZOATE",  "PESTICIDE",
  "FANTAC PLUS",         "PESTICIDE",
  "CYPERMETHRIN",        "PESTICIDE",
  "CROJAINE",            "PESTICIDE",
  "METASINE",            "PESTICIDE",
  "CHLORPYRIPHOS 50% EC", "PESTICIDE",
  "TRICYCLAZOLE 75%",    "PESTICIDE",
  "CHLORANTRANILPROLE",  "PESTICIDE",
  "LUCID",               "PESTICIDE",
  "TRACER",              "PESTICIDE",
  "TRICOFAL",            "PESTICIDE",
  "THRISUL",             "PESTICIDE",
  "COROZEN",             "PESTICIDE",
  "PACTUS",              "PESTICIDE",
  "VAJRA",               "PESTICIDE",
  "VAJRAM",              "PESTICIDE",
  "POLO",                "PESTICIDE",
  
  "FYM",                 "ORGANIC MATERIAL",
  "COMPOST",             "ORGANIC MATERIAL",
  "MANURE",              "ORGANIC MATERIAL",
  "POULTRY MANURE",      "ORGANIC MATERIAL", 
  "VERMICOMPOST",        "ORGANIC MATERIAL",
  "VERMI COMPOST",       "ORGANIC MATERIAL",
  "LEAFY VEGETABLE",     "ORGANIC MATERIAL",
  "VEGETABLE",           "ORGANIC MATERIAL",
  "GREEN LEAF",          "ORGANIC MATERIAL",
  "ASH",                 "ORGANIC MATERIAL",
  "COW DUNG",            "ORGANIC MATERIAL",

  "ZINC",                "MICRONUTRIENT",
  "NUTRIENT",            "MICRONUTRIENT",
  "D LAB LAB",           "MICRONUTRIENT",
  "CALCIUM",             "MICRONUTRIENT",
  "BHUCHETAN",           "MICRONUTRIENT",
  "TONIC",               "MICRONUTRIENT"
)
```

```{r apply_table_type}
# CultInput : Harmoniser les outils
CultInput_MAT <- CultInput_MAT |>
  left_join(correspondances_typemat, by = "NAME_MAT") |>
  mutate(
    TYPE_MAT = case_when(
      !is.na(NEW_TYPE_MAT) ~ NEW_TYPE_MAT,
      TRUE ~ TYPE_MAT
    )
  ) |>
  select(-NEW_TYPE_MAT)
```


*2. Pivoter la table CultInput_MAT*

L'objectif est d'avoir pour chaque opération (même date d'opération), une seule ligne par champ indiquant toutes les outils utilisés à cette date. Pour ce faire, je pivote en large la table CultInput_MAT.

```{r pivot_cultinput_mat}
CultInput_MAT <- CultInput_MAT |>
  group_by(VDS_ID, SUB_PLOT_CODE, SEASON, DT_OPER, OPERATION, .keep = "all") |>
  mutate(row_id = row_number()) |>
  ungroup() |>
  pivot_wider(
    id_cols = c(VDS_ID, PLOT_CODE, SUB_PLOT_CODE, CROP_AREA, SEASON, DT_OPER, OPERATION),
    names_from = row_id,
    values_from = c(TYPE_MAT, NAME_MAT, UNIT_MAT, QTY_MAT, VAL_MAT, RATE_MAT, SOURCE_MAT),
    names_glue = "{.value}_{row_id}"
  )
```


#### Fusionné

```{r create_cultinput_merged}
any(duplicated(CultInput_MAT[, c("VDS_ID", "PLOT_CODE", "SUB_PLOT_CODE", "CROP_AREA", "DT_OPER", "OPERATION", "SEASON")]))

any(duplicated(CultInput_LAB[, c("VDS_ID", "PLOT_CODE", "SUB_PLOT_CODE", "CROP_AREA", "DT_OPER", "OPERATION", "SEASON")]))
```
```{r Fusionner CultInput}
keys_join <- c("VDS_ID", "PLOT_CODE", "SUB_PLOT_CODE", "CROP_AREA", "DT_OPER", "OPERATION", "SEASON")

# Fusionner les deux tables
CultInput_merged <- full_join(
  CultInput_LAB,
  CultInput_MAT,
  by = keys_join
)
```


#### CultOutput

```{r table_dup_cultoutput}
# Supprimer les lignes identiques
CultOutput <- CultOutput |> distinct() |>

# Pivoter les variables CROP, PRCT_AREA, VAR_NAME, VAR_TYPE, OP_MAIN_PROD_UNIT et OP_MAIN_PROD_QTY en colonnes
  group_by(VDS_ID, SUB_PLOT_CODE, SEASON, CROP_AREA) |>
  mutate(crop_id = row_number()) |>
  filter(crop_id <= 4) |>  # Limiter à 4 cultures max
  ungroup() |>
  pivot_wider(
    id_cols = c(VDS_ID, SUB_PLOT_CODE, CROP_AREA, SEASON),
    names_from = crop_id,
    values_from = c(CROP, PRCT_AREA, VAR_NAME, VAR_TYPE, OP_MAIN_PROD_UNIT, OP_MAIN_PROD_QTY),
    names_glue = "{.value}_{crop_id}"
  )
```

```{r delete_dup_cultouput}
# Tableau des doublons CultOutput
dup_rows_CultOutput <- CultOutput |>
  group_by(VDS_ID, SUB_PLOT_CODE, SEASON) |>
  filter(n() > 1) |>
  ungroup()

# Supprimer les lignes avec les mêmes variables VDS_ID / SUB_PLOT_CODE / SEASON en double. Supprimer celles avec le plus de NA.
n_avant <- nrow(CultOutput)
CultOutput <- CultOutput |>
  mutate(n_na = rowSums(across(everything(), is.na))) |>
  group_by(VDS_ID, SUB_PLOT_CODE, SEASON) |>
  slice_min(order_by = n_na, with_ties = FALSE) |>
  ungroup() |>
  select(-n_na)
n_avant - nrow(CultOutput)
```


### Landholding

```{r delete_dup_landholding}
# Tableau des doublons Landholding
dup_rows_Landholding <- Landholding |>
  group_by(VDS_ID, PLOT_CODE) |>
  filter(n() > 1) |>
  ungroup()

# Supprimer les doublons avec le même couple VDS_ID / PLOT_CODE. Supprimer les lignes avec le plus de n/a. 
n_avant <- nrow(Landholding)
Landholding <- Landholding |>
  mutate(n_na = rowSums(across(everything(), is.na))) |>
  group_by(VDS_ID, PLOT_CODE) |>
  distinct() |>
  slice_min(order_by = n_na, with_ties = FALSE) |>
  ungroup() |>
  select(-n_na)
n_avant - nrow(Landholding)
```


### Vérifier les doublons restants

```{r table_all_dups}
any(duplicated(CultOutput[, c("VDS_ID", "SUB_PLOT_CODE", "SEASON")]))

any(duplicated(CultInput_merged[, c("VDS_ID", "SUB_PLOT_CODE", "SEASON", "OPERATION", "DT_OPER")]))

any(duplicated(Landholding[, c("VDS_ID", "PLOT_CODE")]))
```

********************************************************************************

## Création d'une clé de jonction

### Correspondance des champs entre les tables

```{r match_cultinput_landholding}
# Vérifier les couples (VDS_ID, PLOT_CODE)
landholding_keys <- Landholding |>
  select(VDS_ID, PLOT_CODE)

cultinput_plots_keys <- CultInput_merged |>
  select(VDS_ID, PLOT_CODE) |>
  distinct()

# Identifier les lignes dans CultiInput qui n'ont pas de match dans Landholding
non_match <- anti_join(cultinput_plots_keys, landholding_keys, by = c("VDS_ID", "PLOT_CODE"))

n_non_matched <- nrow(non_match)
n_total <- nrow(cultinput_plots_keys)
prop_non_matched <- round(n_non_matched / n_total * 100, 2)

cat(" - Total de plots dans CultInput :", n_total, "\n")
cat(" - Plots sans match avec Landholding :", n_non_matched, "\n")
cat(" - Proportion sans match :", prop_non_matched, "%\n")
```

```{r match_cultinput_cultoutput}
# Vérifier les couples (VDS_ID, PLOT_CODE, SEASON)
cultinput_keys <- CultInput_merged |>
  select(VDS_ID, SUB_PLOT_CODE, SEASON, CROP_AREA) |>
  distinct()

cultoutput_keys <- CultOutput |>
  select(VDS_ID, SUB_PLOT_CODE, SEASON, CROP_AREA) |>
  distinct()

# Identifier les champs de CultInput non trouvés dans CultOutput
non_match2 <- anti_join(cultinput_keys, cultoutput_keys, by = c("VDS_ID", "SUB_PLOT_CODE", "SEASON"))

n_non_matched2 <- nrow(non_match2)
n_total2 <- nrow(cultinput_keys)
prop_non_matched2 <- round(n_non_matched2 / n_total2 * 100, 2)

cat(" - Plots totaux dans CultInput :", n_total2, "\n")
cat(" - Plots sans équivalent dans CultOutput :", n_non_matched2, "\n")
cat(" - Proportion sans équivalent :", prop_non_matched2, "%\n")
```

```{r match_villages}
# Faire ressortir les codes de chaque village puis comparer les bases
CultInput_merged <- CultInput_merged |> mutate(STATE = substr(VDS_ID, 1, 1))
CultOutput <- CultOutput |> mutate(STATE = substr(VDS_ID, 1, 1))
Landholding <- Landholding |> mutate(STATE = substr(VDS_ID, 1, 1))

village_cultinput <- unique(CultInput_merged$STATE)
village_cultoutput <- unique(CultOutput$STATE)
village_landholding <- unique(Landholding$STATE)

list(
  CultInput = sort(village_cultinput),
  CultOutput = sort(village_cultoutput),
  Landholding = sort(village_landholding)
)
```

### Base validation_ID

```{r match_vars_ID}
validation_ID <- cultinput_keys |>
  rename(CROP_AREA_CI = CROP_AREA) |>
  left_join(
    cultoutput_keys |> rename(CROP_AREA_CO = CROP_AREA), 
    by = c("VDS_ID", "SUB_PLOT_CODE", "SEASON"))
```


### Modifier Base validation_ID

```{r function_harmonise_ID}
# Harmoniser la base validation_ID: quand 2 des 3 sources (_CI, _CO, _PL) sont identiques pour une même variable, remplacer la 3e valeur par cette valeur majoritaire.
harmonise_ID <- function(df, var) {
  var_CI <- sym(paste0(var, "_CI"))
  var_CO <- sym(paste0(var, "_CO"))

  df <- df |>
    mutate(
      "{var}_CI" := as.character(!!var_CI),
      "{var}_CO" := as.character(!!var_CO)
    ) 

  return(df)
}

validation_ID <- harmonise_ID(validation_ID, "CROP_AREA")
```

```{r base_validation_ID}
validation_ID <- validation_ID |>
  mutate(CROP_AREA_match = CROP_AREA_CI == CROP_AREA_CO)

validation_ID_false <- validation_ID |>
  filter(!CROP_AREA_match)

n_validation_ID <- nrow(validation_ID)
area_match <- nrow(validation_ID |> filter(CROP_AREA_match))
one_false <- nrow(validation_ID |> filter(!CROP_AREA_match))

cat("Total des champs identifiés dans CultInput :", n_validation_ID, "\n")
cat(" - Area match :", area_match, "\n")
cat(" - Area false :", one_false, "\n")
```


### Identifier les champs validés

Je crée la variable OK pour identifier et sélectionner seulement les champs ayant leur équivalent dans les trois tables.

```{r add_validated}
# Création de la variable OK
validation_ID <- validation_ID |>
  mutate(OK = coalesce(CROP_AREA_match, FALSE))

nb_OK <- sum(validation_ID$OK, na.rm = TRUE)
nb_total <- nrow(validation_ID)
pourcentage_OK <- round((nb_OK / nb_total) * 100, 1)

cat("Nombre de lignes validées : ", nb_OK, "\n")
cat("Pourcentage du total : ", pourcentage_OK, "%\n")
```

```{r verif_validated}
# Ajouter la variable OK dans toutes les bases 

# CultInput: 
CultInput_merged <- CultInput_merged |>
  left_join(
    validation_ID |> select(VDS_ID, SUB_PLOT_CODE, SEASON, OK),
    by = c("VDS_ID", "SUB_PLOT_CODE", "SEASON")
  )

# CultOutput
CultOutput <- CultOutput |>
  left_join(
    validation_ID |> select(VDS_ID, SUB_PLOT_CODE, SEASON, OK),
    by = c("VDS_ID", "SUB_PLOT_CODE", "SEASON")
  )

nb_cultinput_OK <- sum(CultInput_merged$OK, na.rm = TRUE)
nb_cultinput_total <- nrow(CultInput_merged)
pourcentage_cultinput_OK <- round((nb_cultinput_OK / nb_cultinput_total) * 100, 1)

nb_cultoutput_OK <- sum(CultOutput$OK, na.rm = TRUE)
nb_cultoutput_total <- nrow(CultOutput)
pourcentage_cultoutput_OK <- round((nb_cultoutput_OK / nb_cultoutput_total) * 100, 1)

lignes_validees <- tibble(
  Base = c("CultInput", "CultOutput"),
  `Nombre de lignes validées` = c(nb_cultinput_OK, nb_cultoutput_OK),
  `Total de lignes` = c(nb_cultinput_total, nb_cultoutput_total),
  `Pourcentage validé (%)` = c(pourcentage_cultinput_OK, pourcentage_cultoutput_OK)
)

print(lignes_validees)
```

```{r filter_validated}
# Sélectionner dans toutes les bases seulement les lignes validées
CultInput_merged <- CultInput_merged |>
  filter(OK==TRUE) |>
  select(-OK)

CultOutput <- CultOutput |>
  filter(OK==TRUE) |>
  select(-OK)
```


********************************************************************************

## Création d'une base commune

### Joindre en colonne les bases

```{r merge_tables}
Cultivation_wide <- CultInput_merged |>

# D'abord joindre avec CultOutput
  left_join(
    CultOutput |> select(-c(STATE, CROP_AREA)),
    by = c("VDS_ID", "SUB_PLOT_CODE", "SEASON")
  ) |>
  
# Puis joindre avec Landholding 
  left_join(Landholding |> select(-c(STATE, CROP_AREA)), by = c("VDS_ID", "PLOT_CODE", "SUB_PLOT_CODE"))
```

```{r reorder_vars}
# Changer l'ordre des colonnes de Cultivation_wide
Cultivation_wide <- Cultivation_wide |>
  relocate(SUR_YR, .before = VDS_ID) |>
  relocate(PLOT_CODE, .before = SUB_PLOT_CODE) |>
  relocate(PLOT_AREA, .before = CROP_AREA) |>
  relocate(IRRI_AREA, .after = CROP_AREA) |>
  relocate(c(VAR_TYPE_1, VAR_TYPE_2, VAR_TYPE_3, VAR_TYPE_4), 
           .after = c(VAR_NAME_1, VAR_NAME_2, VAR_NAME_3, VAR_NAME_4))
```


### Base Household_info

*Correspondance entre Cultivation_wide et Household_info*

Je vérifie la correspondance des ménages entre Cultivation et Household_info, une fois les années harmonisées. 

```{r match_cultivation_householdinfo}
household_keys <- Household_info |>
  select(VDS_ID) |>
  distinct()

cultivation_keys <- Cultivation_wide |>
  select(VDS_ID) |>
  distinct()

# Identifier les ménages de Cultivation_wide non trouvés dans Household_info
non_match4 <- anti_join(cultivation_keys, household_keys, by = "VDS_ID")

n_non_matched4 <- nrow(non_match4)
n_hh <- nrow(cultivation_keys)
prop_non_matched4 <- round(n_non_matched4 / n_hh * 100, 2)

cat(" - Ménages totaux dans Cultivation_wide :", n_hh, "\n")
cat(" - Ménages sans équivalent dans Household_info :", n_non_matched4, "\n")
cat(" - Proportion sans équivalent :", prop_non_matched4, "%\n")
```

#### Catégoriser les castes

```{r table_castegroup}
# Table de correspondance entre CASTE et CASTE_GROUP
correspondances_typemat <- tribble(
  ~CASTE,                ~NEW_CASTE_GROUP,
  "WANI",                "FC / OBC",
  
  "MARATHA",             "FC",
  "REDDY",               "FC",
  "KALAL",               "FC",
  "VYSYA",               "FC",
  "BRAHMIN",             "FC",
  "GONDHARI",            "FC",
  "GONDHALI",            "FC",
  "WANI",                "FC",
  "VELAMA",              "FC",
  "VELMA",               "FC",
  
  "KURMA",               "BC",
  "GOWDA",               "BC",
  "CHAKALI",             "BC",
  "PADMASALI",           "BC",
  "MAHSALI",             "BC",
  "VADLA",               "BC",
  "KUMMARI",             "BC",
  "KAMMARI",             "BC",
  "GOLLA",               "BC",
  "TELAGA",              "BC",
  "MUSTI",               "BC",
  "MEDARI",              "BC",
  "BOYA",                "BC",
  "EDIGA",               "BC",
  "BHATRAJULU",          "BC",
  "NAVBOUDH",            "BC",
  "NAVBOUDHA",           "BC",
  "NAV BOUDHA",          "BC",
  "MANGALI",             "BC",
  "KATIKA",              "BC",
  
  "BAINDLA",             "SC",
  "MADIGA",              "SC",
  "MALA",                "SC",
  "MATANG",              "SC",
  "COBBLER",             "SC",
  
  "MALI",                "OBC",
  "JIREMALI",            "OBC",
  "JIRE MALI",           "OBC",
  "KUMBHAR",             "OBC",
  "WASHERMAN",           "OBC",
  "BARBAR",              "OBC",
  "BARBER",              "OBC",
  "POTTER",              "OBC",
  "PARIT",               "OBC",
  "TELI",                "OBC",
  "CARPENTER",           "OBC",
  
  "GOSAWI",              "NT",
  "GOWARI",              "NT",
  "BELDAR",              "NT",
  "RAJPUT",              "NT",
  "WADAR",               "NT",
  "SHEPHARD",            "NT",
  
  "KOLI",                "SBC",
  
  "SUTAR",               "",
  "MUSLIM",              "",
  "KAMSALI",             "",
  "KOSTHI",              "",
  "SUVARNAKAR",          "",
  "KAIKADI",             "",
  "BETTARAJ",            ""
)
```

#### Ajouter la caste

```{r add_caste}
Cultivation_wide <- Cultivation_wide |>
  left_join(Household_info |> select(VDS_ID, CASTE, CASTE_GROUP), by = "VDS_ID") |>
  mutate(
    CASTE_GROUP = recode(CASTE_GROUP, `OBC` = "BC", `EBC` = "BC", `SBC` = "BC", `SBC/SEBC/EBC` = "BC", `NT` = "OTHER", `Minorities` = "OTHER", `VJ` = "OTHER"))
```

Je regarde le nombre de n/a pour la caste dans Cultivation.  

```{r verif_na_caste}
Cultivation_wide |>
  summarise(
    na_caste = sum(is.na(CASTE_GROUP)),
    total = n(),
    pct_na = round(100 * na_caste / total, 2)
  )
```


********************************************************************************

# Liens extérieurs

## Enregistrer Cultivation_wide_annee

```{r save_cultivation_wide}
# Définir le chemin du dossier
folder_path <- here("Base de données générées", "Cultivation_wide")

# Créer le dossier s'il n'existe pas
if (!dir.exists(folder_path)) {
  dir.create(folder_path, recursive = TRUE)
}

# Ajouter l'année au nom de fichier
fichier_base <- paste0("Cultivation_wide_", annee)

# Enregistrer le fichier CSV
write.csv(
  Cultivation_wide,
  file = file.path(folder_path, paste0(fichier_base, ".csv")),
  row.names = FALSE
)

# Enregistrer le fichier RDS
saveRDS(
  Cultivation_wide,
  file = file.path(folder_path, paste0(fichier_base, ".rds"))
)
```




********************************************************************************

# A faire 

Année 2007 similaire aux années avant 2005
Retrouver l'équivalent Caste_group pour chaque Caste avec l'année 2008 - Gen_info















