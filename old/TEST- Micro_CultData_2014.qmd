---
title: "Micro_Cultivation_2014_test2"
author: "Lucile DUBARRY"
format: html
editor: visual
---

```{r}
rm(list = ls())
graphics.off()
cat("\014")
```

```{r}
#| message: false
here::i_am("INCRESAT_Micro_database.Rproj")
library(dplyr)
library(tidyr)
library(readxl)
```

## Importer les données

```{r Importer les données, message=FALSE, warning=FALSE}
EAST_CultInput_2014 <- read_excel("raw_data/EAST_Cultivation_Input_2014.xlsx")
SAT_CultInput_2014 <- read_excel("raw_data/SAT_Cultivation_Input_2014.xlsx")
EAST_CultOutput_2014 <- read_excel("raw_data/EAST_Cultivation_Output_2014.xlsx")
SAT_CultOutput_2014 <- read_excel("raw_data/SAT_Cultivation_Output_2014.xlsx")
```

## Assembler les régions par base de données

```{r Harmoniser les types de chaque colonne}
# Je repère si les colonnes ayant le même nom et vérifie si elles sont du même type  (numeric ou character). Dans le cas de colonnes avec le même nom mais d'un type différent, je les convertis en character, ce qui limite le nombre de NA. IL est nécessaire que les colonnes soient du même type pour utiliser la fonction bind_rows. 

common_cols_cultinput <- intersect(names(EAST_CultInput_2014), names(SAT_CultInput_2014))
for (col in common_cols_cultinput) {
    EAST_CultInput_2014[[col]] <- as.character(EAST_CultInput_2014[[col]])
    SAT_CultInput_2014[[col]] <- as.character(SAT_CultInput_2014[[col]])
}

common_cols_cultoutput <- intersect(names(EAST_CultOutput_2014), names(SAT_CultOutput_2014))
for (col in common_cols_cultoutput) {
    EAST_CultOutput_2014[[col]] <- as.character(EAST_CultOutput_2014[[col]])
    SAT_CultOutput_2014[[col]] <- as.character(SAT_CultOutput_2014[[col]])
}
```

```{r}
CultInput_2014 <- bind_rows(EAST_CultInput_2014, SAT_CultInput_2014)
CultOuput_2014 <- bind_rows(EAST_CultOutput_2014, EAST_CultOutput_2014)

CultInput_2014 <- CultInput_2014 |>
  rename(PLOT_CODE = PLOT_CO)

CultOuput_2014 <- CultOuput_2014 |>
  select(-OP_MAIN_PROD_UNIT, -OP_MAIN_PROD_QTY, -OP_MAIN_PROD_RATE, -OP_BY_PROD_UNIT, -OP_BY_PROD_QTY, -OP_BY_PROD_RATE, -OP_OT_PROD_UNIT, -OP_OT_PROD_QTY, -OP_OT_PROD_RATE, -REMARKS)
```

## Vérifier la correspondances des plots entre CultInput et CultOuput

```{r}
# Vérifier les couples (VDS_ID, PLOT_CODE)
cultinput_keys <- CultInput_2014 |>
  select(VDS_ID, PLOT_CODE) |>
  distinct()

cultoutput_keys <- CultOuput_2014 |>
  select(VDS_ID, PLOT_CODE) |>
  distinct()

# Identifier les champs de CultInput non trouvés dans CultOuput
non_match <- anti_join(cultinput_keys, cultoutput_keys, by = c("VDS_ID", "PLOT_CODE"))

n_non_matched <- nrow(non_match)
n_total <- nrow(cultinput_keys)
prop_non_matched <- round(n_non_matched / n_total * 100, 2)

cat(" - Plots totaux dans CultInput :", n_total, "\n")
cat(" - Plots sans équivalent dans CultOuput :", n_non_matched, "\n")
cat(" - Proportion sans équivalent :", prop_non_matched, "%\n")
```

```{r}
# Et inversement, les champs de CultOutput non trouvés dans CultInput
non_match_cultoutup <- anti_join(cultoutput_keys, cultinput_keys, by = c("VDS_ID", "PLOT_CODE"))

n_cultoutup_non_matched <- nrow(non_match_cultoutup)
n_cultoutup_total <- nrow(cultoutput_keys)
prop_cultoutup_non_matched <- round(n_cultoutup_non_matched / n_cultoutup_total * 100, 2)

cat(" - Plots totaux dans CultOutput :", n_cultoutup_total, "\n")
cat(" - Plots sans équivalent dans CultInput :", n_cultoutup_non_matched, "\n")
cat(" - Proportion sans équivalent :", prop_cultoutup_non_matched, "%\n")
```
