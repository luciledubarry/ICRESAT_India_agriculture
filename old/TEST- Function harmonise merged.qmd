---
title: "Function Harmonise merged"
format: html
editor: visual
---

## Function harmonise_ID de la base Merged

Harmoniser la base merged: quand 2 des 3 sources (\_CI, \_CO, \_PL) sont identiques pour une même variable, remplacer la 3e valeur par cette valeur majoritaire.

### Test 1: méthode à la main

na_merged_avant \<- sum(is.na(merged\$PLOT_AREA_PL)) merged \<- merged \|\> mutate(across( c(PLOT_AREA_CI, PLOT_AREA_CO, PLOT_AREA_PL), \~ as.numeric(gsub(",", ".", gsub("\[\^0-9.,\]", "", .))) )) \|\> mutate( PLOT_NAME_CI = as.character(PLOT_NAME_CI), PLOT_NAME_CO = as.character(PLOT_NAME_CO), PLOT_NAME_PL = as.character(PLOT_NAME_PL) )

merged \<- merged \|\> mutate( PLOT_AREA_CI = ifelse( abs(PLOT_AREA_CO - PLOT_AREA_PL) \<= 0.5 & abs(PLOT_AREA_CI - PLOT_AREA_CO) \> 0.5 & abs(PLOT_AREA_CI - PLOT_AREA_PL) \> 0.5, PLOT_AREA_CO, PLOT_AREA_CI ), PLOT_AREA_CO = ifelse( abs(PLOT_AREA_CI - PLOT_AREA_PL) \<= 0.5 & abs(PLOT_AREA_CO - PLOT_AREA_CI) \> 0.5 & abs(PLOT_AREA_CO - PLOT_AREA_PL) \> 0.5, PLOT_AREA_CI, PLOT_AREA_CO ), PLOT_AREA_PL = ifelse( abs(PLOT_AREA_CI - PLOT_AREA_CO) \<= 0.5 & abs(PLOT_AREA_PL - PLOT_AREA_CI) \> 0.5 & abs(PLOT_AREA_PL - PLOT_AREA_CO) \> 0.5, PLOT_AREA_CI, PLOT_AREA_PL ) )

merged \<- merged \|\> mutate( PLOT_NAME_CI = ifelse( PLOT_NAME_CI != PLOT_NAME_CO & PLOT_NAME_CI != PLOT_NAME_PL & PLOT_NAME_CO == PLOT_NAME_PL, PLOT_NAME_CO, PLOT_NAME_CI ), PLOT_NAME_CO = ifelse( PLOT_NAME_CO != PLOT_NAME_CI & PLOT_NAME_CO != PLOT_NAME_PL & PLOT_NAME_CI == PLOT_NAME_PL, PLOT_NAME_CI, PLOT_NAME_CO ), PLOT_NAME_PL = ifelse( PLOT_NAME_PL != PLOT_NAME_CI & PLOT_NAME_PL != PLOT_NAME_CO & PLOT_NAME_CI == PLOT_NAME_CO, PLOT_NAME_CI, PLOT_NAME_PL ) ) na_merged_après \<- sum(is.na(merged\$PLOT_AREA_PL)) na_merged_après - na_merged_avant

### Test 2: création d'une fonction avec seuil de tolérance

na_merged_avant \<- sum(is.na(merged\$PLOT_AREA_PL)) merged \<- merged \|\> mutate(across( c(PLOT_AREA_CI, PLOT_AREA_CO, PLOT_AREA_PL), \~ as.numeric(gsub(",", ".", gsub("\[\^0-9.,\]", "", .))) )) \|\> mutate( PLOT_NAME_CI = as.character(PLOT_NAME_CI), PLOT_NAME_CO = as.character(PLOT_NAME_CO), PLOT_NAME_PL = as.character(PLOT_NAME_PL) )

harmonise_ID \<- function(df, var, type = c("numeric", "text")) { type \<- match.arg(type)

var_CI \<- sym(paste0(var, "\_CI")) var_CO \<- sym(paste0(var, "\_CO")) var_PL \<- sym(paste0(var, "\_PL")) var_out \<- sym(var)

if (type == "numeric") { df \<- df \|\> mutate( !!var_out := case_when( !is.na(!!var_CO) & !is.na(!!var_PL) & abs(!!var_CO - !!var_PL) \<= 0.5 & (is.na(!!var_CI) \| (abs(!!var_CI - !!var_CO) \> 0.5 & abs(!!var_CI - !!var_PL) \> 0.5)) \~ !!var_CO,

```         
    is.na(!!var_CI) & !is.na(!!var_CO) & !!var_CO == !!var_PL ~ !!var_CO,
    is.na(!!var_CO) & !is.na(!!var_CI) & !!var_CI == !!var_PL ~ !!var_CI,
    is.na(!!var_PL) & !is.na(!!var_CI) & !!var_CI == !!var_CO ~ !!var_CI,

    TRUE ~ NA_real_
  )
)
```

}

if (type == "text") { df \<- df \|\> mutate( !!var_out := case_when( !is.na(!!var_CO) & !is.na(!!var_PL) & stringdist::stringdist(!!var_CO, !!var_PL, method = "lv") \<= 3 & (is.na(!!var_CI) \| (stringdist::stringdist(!!var_CI, !!var_CO, method = "lv") \> 3 & stringdist::stringdist(!!var_CI, !!var_PL, method = "lv") \> 3)) \~ !!var_CO,

```         
    is.na(!!var_CI) & !is.na(!!var_CO) & !!var_CO == !!var_PL ~ !!var_CO,
    is.na(!!var_CO) & !is.na(!!var_CI) & !!var_CI == !!var_PL ~ !!var_CI,
    is.na(!!var_PL) & !is.na(!!var_CI) & !!var_CI == !!var_CO ~ !!var_CI,

    TRUE ~ NA_character_
  )
)
```

}

return(df) }

merged \<- harmonise_ID(merged, "PLOT_AREA", type = "numeric") merged \<- harmonise_ID(merged, "PLOT_NAME", type = "text") na_merged_après \<- sum(is.na(merged\$PLOT_AREA_PL)) na_merged_après - na_merged_avant

### Méthode actuelle: Fonction sans seuil de tolérance

harmonise_ID \<- function(df, var) { var_CI \<- sym(paste0(var, "\_CI")) var_CO \<- sym(paste0(var, "\_CO")) var_PL \<- sym(paste0(var, "\_PL"))

df \<- df %\>% mutate( "{var}\_CI" := as.character(!!var_CI), "{var}\_CO" := as.character(!!var_CO), "{var}\_PL" := as.character(!!var_PL) ) %\>% mutate( !!var_CI := case_when( !is.na(!!var_CO) & !is.na(!!var_PL) & !!var_CO == !!var_PL \~ !!var_CO, TRUE \~ !!var_CI ), !!var_CO := case_when( !is.na(!!var_CI) & !is.na(!!var_PL) & !!var_CI == !!var_PL \~ !!var_CI, TRUE \~ !!var_CO ), !!var_PL := case_when( !is.na(!!var_CI) & !is.na(!!var_CO) & !!var_CI == !!var_CO \~ !!var_CI, TRUE \~ !!var_PL ) )

return(df) }

merged \<- harmonise_ID(merged, "PLOT_AREA") merged \<- harmonise_ID(merged, "PLOT_NAME")
