---
title: "Test- Cultivation_data_cleaning/merging"
format: html
editor: source
---

Dans cette version, j'essaie harmoniser la variable CROP (et ajouter la variable CROP_ID) après le merge des 3 bases en Cultivation_2014. Pour l'instant, j'ai simplement placé après le merge la partie "Culture" sans modifier le contenu des chunks. 


```{r}
#| message: false
rm(list = ls())
graphics.off()
cat("\014")
```

```{r}
#| message: false
here::i_am("INCRESAT_Micro_database.Rproj")
library(dplyr)
library(tidyr)
library(readxl)
library(stringr)
library(stringdist)
```

# Nettoyage des bases

## Importer les données

```{r Importer les données, message=FALSE, warning=FALSE}
EAST_CultInput_2014 <- read_excel("raw_data/EAST_Cultivation_Input_2014.xlsx")
SAT_CultInput_2014 <- read_excel("raw_data/SAT_Cultivation_Input_2014.xlsx")
EAST_CultOutput_2014 <- read_excel("raw_data/EAST_Cultivation_Output_2014.xlsx")
SAT_CultOutput_2014 <- read_excel("raw_data/SAT_Cultivation_Output_2014.xlsx")
EAST_PlotList_2014 <- read_excel("raw_data/EAST_Plot_List_2014.xlsx")
SAT_PlotList_2014 <- read_excel("raw_data/SAT_Plot_List_2014.xlsx")
```

## Rassembler par région

```{r Harmoniser les noms des variables}
SAT_PlotList_2014 <- SAT_PlotList_2014 |>
  rename(VDS_ID = PL_ID)

EAST_CultOutput_2014 <- EAST_CultOutput_2014 |>
  rename(PLOT_AREA = PLO_AREA)

SAT_PlotList_2014 <- SAT_PlotList_2014 %>%
  mutate(PLOT_AREA = round(PLOT_AREA, 2))

EAST_PlotList_2014 <- EAST_PlotList_2014 %>%
  mutate(PLOT_AREA = round(PLOT_AREA, 2))
```

```{r Harmoniser les types de chaque colonne}
# Je repère si les colonnes ayant le même nom et vérifie si elles sont du même type  (numeric ou character). Dans le cas de colonnes avec le même nom mais d'un type différent, je les convertis en character, ce qui limite le nombre de NA. IL est nécessaire que les colonnes soient du même type pour utiliser la fonction bind_rows. 

common_cols_cultinput <- intersect(names(EAST_CultInput_2014), names(SAT_CultInput_2014))
for (col in common_cols_cultinput) {
    EAST_CultInput_2014[[col]] <- as.character(EAST_CultInput_2014[[col]])
    SAT_CultInput_2014[[col]] <- as.character(SAT_CultInput_2014[[col]])
}

common_cols_cultoutput <- intersect(names(EAST_CultOutput_2014), names(SAT_CultOutput_2014))
for (col in common_cols_cultoutput) {
    EAST_CultOutput_2014[[col]] <- as.character(EAST_CultOutput_2014[[col]])
    SAT_CultOutput_2014[[col]] <- as.character(SAT_CultOutput_2014[[col]])
}

common_cols_plotlist <- intersect(names(EAST_PlotList_2014), names(SAT_PlotList_2014))
for (col in common_cols_plotlist) {
    EAST_PlotList_2014[[col]] <- as.character(EAST_PlotList_2014[[col]])
    SAT_PlotList_2014[[col]] <- as.character(SAT_PlotList_2014[[col]])
}
```

## Vérifications des bases et questions spécifiques

### CultOutput
On vérifie comment a été remplie la variable OPERATION, variable mensuelle.
Est-ce qu'il y a 12 lignes OPERATION par ménage (identifié par VDS_ID) ? 

```{r}
CultInput_2014 <- bind_rows(EAST_CultInput_2014, SAT_CultInput_2014)
CultOutput_2014 <- bind_rows(EAST_CultOutput_2014, EAST_CultOutput_2014)
PlotList_2014 <- bind_rows(EAST_PlotList_2014, SAT_PlotList_2014)
```

## Conserver les variables d'intérêt

```{r}
CultInput_2014 <- CultInput_2014 |>
  rename(PLOT_CODE = PLOT_CO) |>
  select(-NAME_MAT, -UNIT_MAT, -QTY_MAT, -RATE_MAT, -VAL_MAT, -SOURCE_MAT, -TYPE_MAT, -REMARKS) |>
  filter(!is.na(LAB_TYPE)) |> 
  filter(!is.na(VDS_ID)) |>
  filter(LAB_TYPE != 0)

CultOutput_2014 <- CultOutput_2014 |>
  filter(!is.na(VDS_ID)) |>
  select(-RENT_VAL, -OP_MAIN_PROD_UNIT, -OP_MAIN_PROD_QTY, -OP_MAIN_PROD_RATE, -OP_BY_PROD_UNIT, -OP_BY_PROD_QTY, -OP_BY_PROD_RATE, -OP_OT_PROD_UNIT, -OP_OT_PROD_QTY, -OP_OT_PROD_RATE, -REMARKS)

PlotList_2014 <- PlotList_2014 |>
  filter(!is.na(VDS_ID)) |>
  select(-CROP_3, - CROP_4, -OW_STAT, -RENT_REC_PAID, -REMARKS, -PLOT_CODE, -PLOT_AREA) |>
  rename(PLOT_CODE = SUB_PLOT_CODE) |>
  rename(PLOT_AREA = CROP_AREA)
```

## Harmoniser les variables et supprimer les doublons

### CultInput
```{r Enlever les doublons de CultInput}
# Arrondir WORK_HR à la première décimale (il y a des doublons créés à cause de cela)
CultInput_2014$WORK_HR <- as.numeric(as.character(CultInput_2014$WORK_HR))
CultInput_2014$WORK_HR <- round(CultInput_2014$WORK_HR, 1)
CultInput_2014 <- CultInput_2014 |> 
  filter(!is.na(WORK_HR)) |> 
  filter(WORK_HR != 0)

# Arrondir PLOT_AREA à la deuxième décimale (pour harmoniser avec les autres bases)
CultInput_2014$PLOT_AREA <- as.numeric(as.character(CultInput_2014$PLOT_AREA))
CultInput_2014$PLOT_AREA <- round(CultInput_2014$PLOT_AREA, 2)

# Supprimer les doublons lorsque seule la date SUR_MON_YR diffère (en conservant la date la plus ancienne)
CultInput_2014 <- CultInput_2014 |>
  arrange(SUR_MON_YR) |>
  distinct(VDS_ID, PLOT_NAME, PLOT_CODE, SEASON, PLOT_AREA, WORK_HR, DT_OPER, OPERATION, LAB_TYPE, IRRI_AREA, .keep_all = TRUE)

# Supprimer les doublons lorsque seul WORK_HR diffère (en conservant le nombre le plus haut)
n_avant <- nrow(CultInput_2014)
CultInput_2014 <- CultInput_2014 |>
  arrange(desc(WORK_HR)) |>
  distinct(VDS_ID, PLOT_NAME, PLOT_CODE, SEASON, PLOT_AREA, DT_OPER, OPERATION, LAB_TYPE, IRRI_AREA, .keep_all = TRUE)
n_avant - nrow(CultInput_2014)
```

### PlotList 
```{r Enlever les doublons de PlotList}
# Arrondir les variables IRRI_AREA et PLOT_AREA à la deuxième décimale 
PlotList_2014$IRRI_AREA <- as.numeric(as.character(PlotList_2014$IRRI_AREA))
PlotList_2014$IRRI_AREA <- round(PlotList_2014$IRRI_AREA, 2)
PlotList_2014$PLOT_AREA <- as.numeric(as.character(PlotList_2014$PLOT_AREA))
PlotList_2014$PLOT_AREA <- round(PlotList_2014$PLOT_AREA, 2)

# Supprimer les doublons causés par des valeurs de IRRI_AREA différentes
PlotList_2014 <- PlotList_2014 |>
  arrange(IRRI_AREA) |>
  distinct(VDS_ID, PLOT_NAME, PLOT_CODE, PLOT_AREA, SEASON, CROP_1, CROP_2, HH_NO, .keep_all = TRUE)
```

```{r}
# Supprimer les lignes exactement identiques
PlotList_2014 <- PlotList_2014 |> distinct()
CultInput_2014 <- CultInput_2014 |> distinct()
CultOutput_2014 <- CultOutput_2014 |> distinct()
```

### CultOuput
```{r Modifier les variables et enlever les doublons de CultOutput}
# Pivoter les variables CROP, PRCT_AREA, VAR_NAME et VAR_TYPE en colonne
CultOutput_2014 <- CultOutput_2014 |>
  group_by(VDS_ID, PLOT_NAME, PLOT_CODE, SEASON, PLOT_AREA, OW_STAT, IRRI_AREA, RENT_FOR) |>
  mutate(crop_id = row_number()) |>
  ungroup() |>
  
  pivot_wider(
    id_cols = c(VDS_ID, PLOT_CODE, PLOT_NAME, PLOT_AREA, SUR_YEAR, IRRI_AREA, SEASON, RENT_FOR, OW_STAT),
    names_from = crop_id,
    values_from = c(CROP, PRCT_AREA, VAR_NAME, VAR_TYPE),
    names_glue = "{.value}_{crop_id}"
  )

# Supprimer les lignes avec les mêmes variables VDS_ID / PLOT_CODE / SEASON en double. Supprimer celles avec le plus de NA.
CultOutput_2014 <- CultOutput_2014 |>
  mutate(n_na = rowSums(across(everything(), is.na))) |>
  group_by(VDS_ID, PLOT_CODE, SEASON) |>
  slice_min(order_by = n_na, with_ties = FALSE) |>
  ungroup() |>
  select(-n_na)
```

### Vérification des doublons restants
```{r Tableaux de vérification des doublons}
any(duplicated(PlotList_2014[, c("VDS_ID", "PLOT_CODE", "CROP_1", "CROP_2", "SEASON")]))

# Tableau des doublons PlotList
dup_rows_PlotList_2014 <- PlotList_2014 |>
  group_by(VDS_ID, PLOT_CODE, SEASON) |>
  filter(n() > 1) |>
  ungroup()

any(duplicated(CultInput_2014[, c("VDS_ID", "PLOT_CODE", "PLOT_AREA", "DT_OPER", "OPERATION", "LAB_TYPE", "SEASON")]))

any(duplicated(CultOutput_2014[, c("VDS_ID", "PLOT_CODE", "SEASON")]))
```

# Création d'une clé de jonction

## Identification unique des plots

```{r Test PlotList: Différentes cultures selon la saison pour le même champ}
#  Vérifier si un champ (identifié par VDS_ID et PLOT_CODE) change de culture (CROP_1) selon la SEASON 
champs_avec_cultures_differentes <- PlotList_2014 |>
  filter(CROP_1 != "SEASONAL FALLOW" & !is.na(CROP_1)) |>
  filter(SEASON != "Perennial") |>
  group_by(VDS_ID, PLOT_NAME, PLOT_CODE, PLOT_AREA, IRRI_AREA) |>
  summarise(
    cultures = paste(unique(CROP_1), collapse = ", "),
    nb_cultures = n_distinct(CROP_1),
    .groups = "drop"
  ) |>
  filter(nb_cultures > 1)

# Pour les trois bases, on a besoin de SEASON pour différencier la culture des champs, qui peut changer dans l'année. L'identification des champs est faite par le couple VDS_ID / PLOT_CODE / SEASON.
```

```{r Correspondance VDS_ID}
# Vérifier si les VDS_ID dans CultInput sont présents dans PlotList
all(CultInput_2014$VDS_ID %in% PlotList_2014$VDS_ID)
setdiff(CultInput_2014$VDS_ID, PlotList_2014$VDS_ID)
length(setdiff(unique(CultInput_2014$VDS_ID), unique(PlotList_2014$VDS_ID)))

# Vérifier si les VDS_ID dans CultInput sont présents dans PlotList
all(CultInput_2014$VDS_ID %in% CultOutput_2014$VDS_ID)
length(setdiff(unique(CultInput_2014$VDS_ID), unique(CultOutput_2014$VDS_ID)))
```

```{r Correspondance des régions}
# Faire ressortir les codes de chaque région puis comparer les bases
CultInput_2014 <- CultInput_2014 |> mutate(REGION_CODE = substr(VDS_ID, 2, 3))
PlotList_2014  <- PlotList_2014  |> mutate(REGION_CODE = substr(VDS_ID, 2, 3))
CultOutput_2014 <- CultOutput_2014 |> mutate(REGION_CODE = substr(VDS_ID, 2, 3))

region_cultinput <- unique(CultInput_2014$REGION_CODE)
region_plotlist <- unique(PlotList_2014$REGION_CODE)
region_cultoutput <- unique(CultOutput_2014$REGION_CODE)

list(
  CultInput = sort(region_cultinput),
  PlotList = sort(region_plotlist),
  CultOutput = sort(region_cultoutput)
)

PlotList_2014 <- PlotList_2014 |>
  select(- REGION_CODE)
CultInput_2014 <- CultInput_2014 |>
  select(- REGION_CODE)
CultOutput_2014 <- CultOutput_2014 |>
  select(- REGION_CODE)
```

```{r Correspondance PLOT_NAME}
# Vérifier si les PLOT_NAME dans CultInput sont présents dans PlotList
all(CultInput_2014$PLOT_NAME %in% PlotList_2014$PLOT_NAME)
length(setdiff(CultInput_2014$PLOT_NAME, PlotList_2014$PLOT_NAME))

# Vérifier si les PLOT_NAME dans CultInput sont présents dans CultOutput
all(CultInput_2014$PLOT_NAME %in% CultOutput_2014$PLOT_NAME)
length(setdiff(CultInput_2014$PLOT_NAME, CultOutput_2014$PLOT_NAME))

sum(is.na(PlotList_2014$PLOT_NAME))
sum(is.na(CultInput_2014$PLOT_NAME))
sum(is.na(CultOutput_2014$PLOT_NAME))
# La variable PLOT_NAME est largement incomplète dans CultInput.  
```

```{r Correspondance SEASON}
sum(is.na(PlotList_2014$SEASON))
sum(is.na(CultInput_2014$SEASON))
sum(is.na(CultOutput_2014$SEASON))
```

## Couple ID des plots

### Base validation_ID

```{r Correspondance couple VDS_ID / PLOT_CODE / SEASON entre les bases}
cultinput_keys <- CultInput_2014 |>
  select(VDS_ID, PLOT_CODE, PLOT_NAME, PLOT_AREA, SEASON) |>
  distinct()

plotlist_keys <- PlotList_2014 |>
  select(VDS_ID, PLOT_CODE, PLOT_NAME, PLOT_AREA, SEASON, CROP_1, CROP_2) |>
  distinct()

cultoutput_keys <- CultOutput_2014 |>
  select(VDS_ID, PLOT_CODE, PLOT_NAME, PLOT_AREA, SEASON, CROP_1, CROP_2) |>
  distinct() |>
  rename(
    PLOT_NAME_CO = PLOT_NAME,
    PLOT_AREA_CO = PLOT_AREA,
    CROP_1_CO = CROP_1,
    CROP_2_CO = CROP_2
  )

validation_ID <- cultinput_keys |>
  rename(
    PLOT_NAME_CI = PLOT_NAME,
    PLOT_AREA_CI = PLOT_AREA,
  ) |>
  left_join(
    plotlist_keys |> rename(
      PLOT_NAME_PL = PLOT_NAME,
      PLOT_AREA_PL = PLOT_AREA,
      CROP_1_PL = CROP_1,
      CROP_2_PL = CROP_2,
    ),
    by = c("VDS_ID", "PLOT_CODE", "SEASON")
  ) |>
  left_join(cultoutput_keys, by = c("VDS_ID", "PLOT_CODE", "SEASON"))
```

### Correspondance des ID dans chaque base

```{r Correspondance CultInput -> PlotList}
# Vérifier les couples (VDS_ID, PLOT_CO, SEASON)
cultinput_keys <- CultInput_2014 |>
  select(VDS_ID, PLOT_CODE, SEASON) |>
  distinct()

plotlist_keys <- PlotList_2014 |>
  select(VDS_ID, PLOT_CODE, SEASON) |>
  distinct()

# Identifier les champs de CultInput non trouvés dans PlotList
non_match <- anti_join(cultinput_keys, plotlist_keys, by = c("VDS_ID", "SEASON", "PLOT_CODE"))

n_non_matched <- nrow(non_match)
n_total <- nrow(cultinput_keys)
prop_non_matched <- round(n_non_matched / n_total * 100, 2)

cat(" - Plots totaux dans CultInput :", n_total, "\n")
cat(" - Plots sans équivalent dans PlotList :", n_non_matched, "\n")
cat(" - Proportion sans équivalent :", prop_non_matched, "%\n")
```

```{r Correspondance CultInput -> CultOutput}
# Vérifier les couples (VDS_ID, PLOT_CODE, SEASON)
cultinput_keys <- CultInput_2014 |>
  select(VDS_ID, PLOT_CODE, SEASON) |>
  distinct()

cultoutput_keys <- CultOutput_2014 |>
  select(VDS_ID, PLOT_CODE, SEASON) |>
  distinct()

# Identifier les champs de CultInput non trouvés dans CultOutput
non_match2 <- anti_join(cultinput_keys, cultoutput_keys, by = c("VDS_ID", "PLOT_CODE", "SEASON"))

n_non_matched2 <- nrow(non_match2)
n_total2 <- nrow(cultinput_keys)
prop_non_matched2 <- round(n_non_matched2 / n_total * 100, 2)

cat(" - Plots totaux dans CultInput :", n_total2, "\n")
cat(" - Plots sans équivalent dans CultOutput :", n_non_matched2, "\n")
cat(" - Proportion sans équivalent :", prop_non_matched2, "%\n")
```

### Modifier Base validation_ID

```{r Harmoniser: Méthode fonction}
# Harmoniser la base validation_ID: quand 2 des 3 sources (_CI, _CO, _PL) sont identiques pour une même variable, remplacer la 3e valeur par cette valeur majoritaire.
harmonise_ID <- function(df, var) {
  var_CI <- sym(paste0(var, "_CI"))
  var_CO <- sym(paste0(var, "_CO"))
  var_PL <- sym(paste0(var, "_PL"))

  df <- df %>%
    mutate(
      "{var}_CI" := as.character(!!var_CI),
      "{var}_CO" := as.character(!!var_CO),
      "{var}_PL" := as.character(!!var_PL)
    ) %>%
    mutate(
      !!var_CI := case_when(
        !is.na(!!var_CO) & !is.na(!!var_PL) & !!var_CO == !!var_PL ~ !!var_CO,
        TRUE ~ !!var_CI
      ),
      !!var_CO := case_when(
        !is.na(!!var_CI) & !is.na(!!var_PL) & !!var_CI == !!var_PL ~ !!var_CI,
        TRUE ~ !!var_CO
      ),
      !!var_PL := case_when(
        !is.na(!!var_CI) & !is.na(!!var_CO) & !!var_CI == !!var_CO ~ !!var_CI,
        TRUE ~ !!var_PL
      )
    )

  return(df)
}

validation_ID <- harmonise_ID(validation_ID, "PLOT_AREA")
validation_ID <- harmonise_ID(validation_ID, "PLOT_NAME")
```

```{r Résultats Base validation_ID}
validation_ID <- validation_ID |>
  mutate(
    PLOT_NAME_match = PLOT_NAME_CI == PLOT_NAME_PL & PLOT_NAME_CI == PLOT_NAME_CO,
    PLOT_AREA_match = PLOT_AREA_CI == PLOT_AREA_PL & PLOT_AREA_CI == PLOT_AREA_CO
  )

validation_ID_false <- validation_ID |>
  filter(!PLOT_NAME_match | !PLOT_AREA_match)

n_validation_ID <- nrow(validation_ID)
area_match <- nrow(validation_ID |> filter(PLOT_AREA_match))
two_match <- nrow(validation_ID |> filter(PLOT_AREA_match & PLOT_NAME_match))
one_match <- nrow(validation_ID |> filter(PLOT_AREA_match | PLOT_NAME_match))
one_na <- nrow(validation_ID |> filter((is.na(PLOT_AREA_match) | !PLOT_AREA_match) &
                      (is.na(PLOT_NAME_match) | !PLOT_NAME_match)))
one_false <- nrow(validation_ID |> filter(!PLOT_AREA_match | !PLOT_NAME_match))

cat("Total des champs identifiés dans CultInput :", n_validation_ID, "\n")
cat(" - 2 matchs :", two_match, "\n")
cat(" - Au moins 1 match :", one_match, "\n", "dont AREA :", area_match, "\n")
cat(" - Aucun match (soit NA soit False) :", one_na, "\n")
cat(" - Au moins 1 False :", one_false, "\n")
```

### Identifier les plots validés

Je crée la variable OK pour identifier et sélectionner seulement les champs ayant au moins un match (validation du champ par PLOT_AREA et/ou PLOT_NAME).

```{r}
# Création de la variable OK
validation_ID <- validation_ID |>
  mutate(
    OK = coalesce(PLOT_NAME_match, FALSE) | 
      coalesce(PLOT_AREA_match, FALSE)
  )

nb_OK <- sum(validation_ID$OK, na.rm = TRUE)
nb_total <- nrow(validation_ID)
pourcentage_OK <- round((nb_OK / nb_total) * 100, 1)

cat("Nombre de lignes validées : ", nb_OK, "\n")
cat("Pourcentage du total : ", pourcentage_OK, "%\n")
```

```{r}
# Ajouter la variable OK dans toutes les bases 

# CultInput: 
CultInput_2014 <- CultInput_2014 |>
  left_join(
    validation_ID |> select(VDS_ID, PLOT_CODE, SEASON, OK),
    by = c("VDS_ID", "PLOT_CODE", "SEASON")
  )

# CultOutput
CultOutput_2014 <- CultOutput_2014 |>
  left_join(
    validation_ID |> select(VDS_ID, PLOT_CODE, SEASON, OK),
    by = c("VDS_ID", "PLOT_CODE", "SEASON")
  )

# PlotList
PlotList_2014 <- PlotList_2014 |>
  left_join(
    validation_ID |> select(VDS_ID, PLOT_CODE, SEASON, OK), 
    by = c("VDS_ID", "PLOT_CODE", "SEASON")
  )

nb_cultinput_OK <- sum(CultInput_2014$OK, na.rm = TRUE)
nb_cultinput_total <- nrow(CultInput_2014)
pourcentage_cultinput_OK <- round((nb_cultinput_OK / nb_cultinput_total) * 100, 1)

nb_cultoutput_OK <- sum(CultOutput_2014$OK, na.rm = TRUE)
nb_cultoutput_total <- nrow(CultOutput_2014)
pourcentage_cultoutput_OK <- round((nb_cultoutput_OK / nb_cultoutput_total) * 100, 1)

nb_plotlist_OK <- sum(PlotList_2014$OK, na.rm = TRUE)
nb_plotlist_total <- nrow(PlotList_2014)
pourcentage_plotlist_OK <- round((nb_plotlist_OK / nb_plotlist_total) * 100, 1)

lignes_validees <- tibble(
  Base = c("CultInput", "CultOutput", "PlotList"),
  `Nombre de lignes validées` = c(nb_cultinput_OK, nb_cultoutput_OK, nb_plotlist_OK),
  `Total de lignes` = c(nb_cultinput_total, nb_cultoutput_total, nb_plotlist_total),
  `Pourcentage validé (%)` = c(pourcentage_cultinput_OK, pourcentage_cultoutput_OK, pourcentage_plotlist_OK)
)

print(lignes_validees)
```

```{r}
# Sélectionner dans toutes les bases seulement lignes validées
CultInput_2014 <- CultInput_2014 |>
  filter(OK==TRUE) |>
  select(-OK)

CultOutput_2014 <- CultOutput_2014 |>
  filter(OK==TRUE) |>
  select(-OK)

PlotList_2014 <- PlotList_2014 |>
  filter(OK==TRUE)
```

# Création d'une base commune

## Supprimer les doublons avant de joindre toutes les bases

```{r}
# Supprimer les lignes exactement identiques
PlotList_2014 <- PlotList_2014 |> distinct()
CultInput_2014 <- CultInput_2014 |> distinct()
CultOutput_2014 <- CultOutput_2014 |> distinct()
```

```{r}
# Je modifie la variable OK en FALSE pour un plot identifé, dont les variables d'identification sont en double et qui ont le même nombre de NA. 
PlotList_2014 <- PlotList_2014 |>
  mutate(
    OK = if_else(
      VDS_ID == "IBH14D0032" & PLOT_NAME == "KOLAI BADH" & PLOT_CODE == "C" & SEASON == "Kharif" & PLOT_AREA == "0.25",
      FALSE,
      OK
    )
  ) 

# Dans PlotList, je supprime les champs en double (même VDS_ID, PLOT_CODE et SEASON) en gardant la ligne avec le moins de NA.
PlotList_2014 <- PlotList_2014 |>
  mutate(n_na = rowSums(across(everything(), is.na))) |>
  group_by(VDS_ID, PLOT_CODE, SEASON) |>
  slice_min(order_by = n_na, with_ties = FALSE) |>
  ungroup() |>
  select(-n_na)
```

```{r}
# Vérifier les doublons restants
any(duplicated(PlotList_2014[, c("VDS_ID", "PLOT_CODE", "SEASON")]))

any(duplicated(CultInput_2014[, c("VDS_ID", "PLOT_CODE", "PLOT_AREA", "DT_OPER", "OPERATION", "LAB_TYPE", "SEASON")]))

any(duplicated(CultOutput_2014[, c("VDS_ID", "PLOT_CODE", "SEASON")]))
```

```{r}
CultInput_2014 |>
  group_by(VDS_ID, PLOT_CODE, SEASON) |>
  summarise(na_irri_cultinput = sum(is.na(IRRI_AREA)), .groups = "drop")

na_irri_plotlist <- PlotList_2014 |>
  group_by(VDS_ID, PLOT_CODE, SEASON) |>
  summarise(na_irri_plotlist = sum(is.na(IRRI_AREA)), .groups = "drop")
```

## Joindre en colonne les bases

```{r}
# Supprimer la variable IRRI_AREA de CultInput (je vais garder celle de PlotList)
Cultivation_2014 <- CultInput_2014 |>
  select(-SUR_YR, -IRRI_AREA, -PLOT_NAME)

# D'abord joindre avec CultOutput
Cultivation_2014 <- Cultivation_2014 |>
  left_join(
    CultOutput_2014 |> select(VDS_ID, PLOT_CODE, SEASON, CROP_1, CROP_2, CROP_3, CROP_4, CROP_1_ID, CROP_2_ID, CROP_3_ID, CROP_4_ID, PRCT_AREA_1, PRCT_AREA_2, PRCT_AREA_3, PRCT_AREA_4,VAR_NAME_1, VAR_NAME_2, VAR_NAME_3, VAR_NAME_4, VAR_TYPE_1, VAR_TYPE_2, VAR_TYPE_3, VAR_TYPE_4),
    by = c("VDS_ID", "PLOT_CODE", "SEASON")
  )
  
# Puis joindre avec PlotList
Cultivation_2014 <- Cultivation_2014 |>
  left_join(
    PlotList_2014 |> select(
      VDS_ID, PLOT_CODE, SEASON, SUR_YR, IRRI_AREA,
      CROP_1_PL = CROP_1,
      CROP_2_PL = CROP_2,
      CROP_1_ID_PL = CROP_1_ID,
      CROP_2_ID_PL = CROP_2_ID
    ),
    by = c("VDS_ID", "PLOT_CODE", "SEASON")
  )

# Remplacer les NA avec les infos de PlotList
Cultivation_2014 <- Cultivation_2014 |>
  mutate(
    CROP_1 = coalesce(CROP_1, CROP_1_PL),
    CROP_2 = coalesce(CROP_2, CROP_2_PL),
    CROP_1_ID = coalesce(CROP_1_ID, CROP_1_ID_PL),
    CROP_2_ID = coalesce(CROP_2_ID, CROP_2_ID_PL)
  ) |>
  select(-CROP_1_PL, -CROP_2_PL, -CROP_1_ID_PL, -CROP_2_ID_PL)
```

```{r}
# Changer l'ordre des colonnes de Cultivation_2014
Cultivation_2014 <- Cultivation_2014 |>
  relocate(SUR_YR, .before = VDS_ID) |>
  relocate(SUR_MON_YR, .after = SUR_YR) |>
  relocate(IRRI_AREA, .after = PLOT_AREA) |>
  relocate(CROP_1_ID, .after = CROP_1) |>
  relocate(CROP_2_ID, .after = CROP_2) |>
  relocate(CROP_3_ID, .after = CROP_3) |>
  relocate(CROP_4_ID, .after = CROP_4) |>
  relocate(VAR_TYPE_1, .after = VAR_NAME_1) |>
  relocate(VAR_TYPE_2, .after = VAR_NAME_2) |>
  relocate(VAR_TYPE_3, .after = VAR_NAME_3) |>
  relocate(VAR_TYPE_4, .after = VAR_NAME_4)
```

# Travail sur la base commune

## Modifier Cultivation_2014

```{r}
# Harmoniser la variable PRCT_AREA_1
Cultivation_2014 <- Cultivation_2014 |>
  mutate(
    across(starts_with("PRCT_AREA"), as.numeric, .names = "{.col}")) |>
  mutate(
    PRCT_AREA_1 = if_else(
      (is.na(PRCT_AREA_2)) & (is.na(PRCT_AREA_3)) & (is.na(PRCT_AREA_4)),
      100,
      PRCT_AREA_1
    ) 
  ) |>
  mutate(
    across(starts_with("PRCT_"), ~ if_else(is.na(.), 0, .), .names = "{.col}")
  )
```

```{r}
# Compter le nombre de lignes pour lesquelles la somme des pRCT_AREA n'est pas égale à 100
Cultivation_2014 <- Cultivation_2014 |>
  mutate(
    PRCT_SUM = rowSums(across(starts_with("PRCT_AREA")), na.rm = TRUE)
  )

# Modifier PRCT_AREA_1 tel que la somme des PRCT soit égale à 100
Cultivation_2014 <- Cultivation_2014 |>
  mutate(
    PRCT_AREA_1 = if_else(
      PRCT_SUM != 100,
      50,
      PRCT_AREA_1
    ),
    PRCT_AREA_2 = if_else(
      PRCT_SUM != 100,
      50,
      PRCT_AREA_2
    )
  ) |>
  select(-PRCT_SUM)
```

```{r}
# Enlever ANNUAL de la variable CROP
Cultivation_2014 <- Cultivation_2014 |>
  mutate(CROP_2 = if_else(CROP_2 == "ANNUAL", NA_character_, CROP_2))
```

```{r}
# Créer la variable FERTILIZER qui précise si l'opération a nécessité de l'engrais ou non
Cultivation_2014 <- Cultivation_2014 |>
  mutate(FERTILIZER = str_detect(OPERATION, "FERTILIZ|FERTIGATION")) |>
  relocate(FERTILIZER, .after = OPERATION)
```

## Harmoniser les variables

```{r}
# Harmoniser la variable OPERATION
Cultivation_2014 <- Cultivation_2014 |>
  mutate(OPERATION = toupper(OPERATION))
```

### Cultures

```{r}
# Créer une liste avec toutes les valeurs uniques de CROP pour associer un numéro à chaque culture

# Table de correspondance des cultures
correspondances <- tribble(
  ~CULTURE_VARIANT,      ~CULTURE_STANDARD,
  "BAMBOO TREE",         "BAMBOO",
  "BLACKGRAM",           "BLACK GRAM",
  "GREEN GRAM",          "BLACK GRAM",
  "MAIZE FODDER",        "MAIZE",
  "GREENGRAM",           "GREEN GRAM",
  "CHICK PEA",           "CHICKPEA",
  "CHIKPEA",             "CHICKPEA",
  "FELLOW",              "SEASONAL FALLOW",
  "FALLOW",              "SEASONAL FALLOW",
  "GROUND NUT",          "GROUNDNUT",
  "HORSE GRAM",          "HORSEGRAM",
  "TURMARIC",            "TURMURIC",
  "MANGO TREE",          "MANGO",
  "MANGOES",             "MANGO",
  "MANGOES TREE",        "MANGO",
  "MUSTERD",             "MUSTARD",
  "MUSTURD",             "MUSTARD",
  "MASTURD",             "MUSTARD",
  "PAADY",               "PADDY",
  "PADDY  SEEDLING",     "PADDY",
  "PADDY GODA",          "PADDY",
  "PADDY NURSURY",       "PADDY",
  "PADDY SEED",          "PADDY",
  "PADDY SEEDLING",      "PADDY",
  "PADDY(SEEDLING)",     "PADDY",
  "PIGION PEA",          "PIGEONPEA",
  "POTATAO",             "POTATO",
  "SORGHUM FODDER",      "SORGHUM",
  "LIN SEED",            "LINSEED",
  "FODDER (EGYPTIAN CLOVER)","EGYPTIAN CLOVER",
  "BERSEEM",             "EGYPTIAN CLOVER",
  "OATS (JAI)",          "JAI",
  "FODDER OATS (JAI)",   "JAI",
  "GREEN FODDER JAI",    "JAI",
  "GREEN FODDER (JANER)","GREEN FODDER",
  "PADDY LOCAL",         "PADDY",
  "PADY",                "PADDY",
  "SMALL MILLET (MARUA)","MARUA",
  "FRENCH BEANS",        "BEANS",
  "FREANCH BEANS",       "BEANS",
  "SMALL MILLET (SARGUJA)","SARGUJA",
  "CHILLIES GREEN",      "CHILLIES",
  "CHILLI GREEN",        "CHILLIES",
  "GREEN CHILLY",        "CHILLIES",
  "PEA",                 "PEAS",
  "SESBANIA ACULEATA (DHAICHA)","DHAICHA",
  "LADYSFINGER",         "LADYS FINGER",
  "LEAFY VEGETABLE",     "LEAFY",
  "CORIENDER",           "CORIANDER",
  "RIDGEGOURD",          "RIDGE GOURD",
  "WHEET",               "WHEAT"
)
```

```{r}
# PlotList :
plotlist_allcult <- PlotList_2014 |>
    semi_join(
    CultInput_2014 |> select(VDS_ID, SEASON, PLOT_CODE),
    by = c("VDS_ID", "PLOT_CODE", "SEASON")
  ) |>
  select(CROP_1, CROP_2) |>
  pivot_longer(everything(), names_to = "CROP_COL", values_to = "CULTURE_VARIANT") |> 
  filter(!is.na(CULTURE_VARIANT)) |>
  mutate(CULTURE_VARIANT = trimws(CULTURE_VARIANT)) |>
  left_join(correspondances, by = c("CULTURE_VARIANT")) |> 
  mutate(CULTURE_FINAL = coalesce(CULTURE_STANDARD, CULTURE_VARIANT)) |> 
  select(CULTURE_VARIANT, CULTURE_FINAL) |>
  distinct()

# CultOuput : 
cultoutput_allcult <- CultOutput_2014 |>
  semi_join(
    CultInput_2014 |> select(VDS_ID, SEASON, PLOT_CODE),
    by = c("VDS_ID", "PLOT_CODE", "SEASON")
  ) |>
  select(CROP_1, CROP_2, CROP_3, CROP_4) |> 
  mutate(across(c(CROP_1, CROP_2, CROP_3, CROP_4), toupper))|> 
  pivot_longer(everything(), names_to = "CROP_COL", values_to = "CULTURE_VARIANT") |> 
  filter(!is.na(CULTURE_VARIANT)) |>
  mutate(CULTURE_VARIANT = trimws(CULTURE_VARIANT)) |>
  left_join(correspondances, by = c("CULTURE_VARIANT")) |> 
  mutate(CULTURE_FINAL = coalesce(CULTURE_STANDARD, CULTURE_VARIANT)) |> 
  select(CULTURE_FINAL, CULTURE_VARIANT) |>
  distinct()

all_cultures <- bind_rows(plotlist_allcult, cultoutput_allcult) |>
  filter(CULTURE_FINAL != "ANNUAL")

crop_ids <- all_cultures |>
  distinct(CULTURE_FINAL) |>
  arrange(CULTURE_FINAL) |>
  mutate(CROP_ID = sprintf("C%02d", row_number()))

all_cultures <- all_cultures |>
  left_join(crop_ids, by = "CULTURE_FINAL") 
```

```{r, message=FALSE, warning=FALSE}
# Ajouter CROP_ID dans PlotList
PlotList_2014 <- PlotList_2014 |> 
  mutate(across(c(CROP_1, CROP_2), ~ trimws(.))) |>
  rename(CULTURE_VARIANT_1 = CROP_1, CULTURE_VARIANT_2 = CROP_2) |>
  left_join(all_cultures |> select(CULTURE_VARIANT, CULTURE_FINAL, CROP_ID) |> rename(CULTURE_VARIANT_1 = CULTURE_VARIANT, CROP_1 = CULTURE_FINAL, CROP_1_ID = CROP_ID),
            by = "CULTURE_VARIANT_1") |>
  left_join(all_cultures |> select(CULTURE_VARIANT, CULTURE_FINAL, CROP_ID) |> rename(CULTURE_VARIANT_2 = CULTURE_VARIANT, CROP_2 = CULTURE_FINAL, CROP_2_ID = CROP_ID),
            by = "CULTURE_VARIANT_2") |>
  select(-CULTURE_VARIANT_1, -CULTURE_VARIANT_2)

#Pour CultOuput
CultOutput_2014 <- CultOutput_2014 |>
  mutate(across(c(CROP_1, CROP_2, CROP_3, CROP_4), ~ trimws(toupper(.)))) |>
  rename(CULTURE_VARIANT_1 = CROP_1, CULTURE_VARIANT_2 = CROP_2, CULTURE_VARIANT_3 = CROP_3, CULTURE_VARIANT_4 = CROP_4) |>
  left_join(all_cultures |> select(CULTURE_VARIANT, CULTURE_FINAL, CROP_ID) |> rename(CULTURE_VARIANT_1 = CULTURE_VARIANT, CROP_1 = CULTURE_FINAL, CROP_1_ID = CROP_ID),
            by = "CULTURE_VARIANT_1") |>
  left_join(all_cultures |> select(CULTURE_VARIANT, CULTURE_FINAL, CROP_ID) |> rename(CULTURE_VARIANT_2 = CULTURE_VARIANT, CROP_2 = CULTURE_FINAL, CROP_2_ID = CROP_ID),
            by = "CULTURE_VARIANT_2") |>
  left_join(all_cultures |> select(CULTURE_VARIANT, CULTURE_FINAL, CROP_ID) |> rename(CULTURE_VARIANT_3 = CULTURE_VARIANT, CROP_3 = CULTURE_FINAL, CROP_3_ID = CROP_ID),
            by = "CULTURE_VARIANT_3") |>
  left_join(all_cultures |> select(CULTURE_VARIANT, CULTURE_FINAL, CROP_ID) |> rename(CULTURE_VARIANT_4 = CULTURE_VARIANT, CROP_4 = CULTURE_FINAL, CROP_4_ID = CROP_ID),
            by = "CULTURE_VARIANT_4")
```

```{r}
# Ajouter le tableau de correspondance des cultures dans Cultivation_2014
Cultivation_2014 <- Cultivation_2014 |>
  pivot_longer(cols = starts_with("CROP_"), names_to = "CROP_COL", values_to = "CULTURE_VARIANT") |>
  filter(!is.na(CULTURE_VARIANT)) |>
  mutate(CULTURE_VARIANT = trimws(toupper(CULTURE_VARIANT))) |>
  left_join(correspondances, by = "CULTURE_VARIANT") |>
  mutate(CULTURE_FINAL = coalesce(CULTURE_STANDARD, CULTURE_VARIANT)) |>
  select(-CROP_COL, -CULTURE_STANDARD)

# Ajouter les CROP_IDs
cultivation_allcult <- cultivation_allcult |>
  filter(CULTURE_FINAL != "ANNUAL") |>
  left_join(crop_ids, by = "CULTURE_FINAL")
```

### Opérations
```{r}
# Tableau de correspodance des opérations pour les regouper en catégories simplifiées
correspondances_oper <- tribble(
  ~OPERATION_VARIANT,                             ~OPERATION,
  
  # LAND PREPARATION(PLOUGHING)
  "BEEDING",                                      "LAND PREPARATION",
  "BED PREPARATION",                              "LAND PREPARATION",
  "BED PREPRATION",                               "LAND PREPARATION",
  "LAND PREPARATION-BED PREPARATION",             "LAND PREPARATION",
  "LAND PREPARATION-BED&FURROW PREPARATION",      "LAND PREPARATION",
  "LAND PREPARATION-BED&FERROW PREPARATION",      "LAND PREPARATION",
  "LAND PREPARATION-BED&FURROW PREPARAT",         "LAND PREPARATION",
  "LAND PREPARATION",                             "LAND PREPARATION",
  "EARTHING UP",                                  "LAND PREPARATION",
  "EARTHING UP WITH FERTILIZER",                  "LAND PREPARATION",
  "LAND PREPARATION-EARTHING UP",                 "LAND PREPARATION",
  "HARROWING",                                    "LAND PREPARATION",
  "LAND PREPARATION-SOIL SPREADING",              "LAND PREPARATION",
  "SOIL SPREADING",                               "LAND PREPARATION",
  "PLOUGHING",                                    "LAND PREPARATION",
  "PLOUHGING",                                    "LAND PREPARATION",
  "PLOUGING",                                     "LAND PREPARATION",
  "MUD PLOUGHING",                                "LAND PREPARATION",
  "HOE PLOUGHING",                                "LAND PREPARATION",
  "MB PLOUGHING",                                 "LAND PREPARATION",
  "DOUBLE PLOUGHING",                             "LAND PREPARATION",
  "PLOUGHING WITH FERTILIZER",                    "LAND PREPARATION",
  "PLOUGHING AND SEED SOWING",                    "LAND PREPARATION",
  "PLOUGHING AND SEED SOWING WITH FERTILIZER",    "LAND PREPARATION",
  "PLOUGHING/HARROWING",                          "LAND PREPARATION",
  "PLOUGHING BY HOE",                             "LAND PREPARATION",
  "LAND PREPARATION-PUDDLING",                    "LAND PREPARATION",
  "LAND PREPARATION -PUDDLING",                   "LAND PREPARATION",
  "PUDDLING",                                     "LAND PREPARATION",
  "LAND PREPARATION - PUDDLING",                  "LAND PREPARATION",
  "PANJI",                                        "LAND PREPARATION",
  "LAND PREPARATION-PATTA",                       "LAND PREPARATION",
  "LAND PREPARATION-PLOUGHING",                   "LAND PREPARATION",
  "LAND PREPARATION- PLOUGHING",                  "LAND PREPARATION",
  "LAND PREPARATION - PLOUHGING",                 "LAND PREPARATION",
  "LAND PREPARATION - PLOUGHING",                 "LAND PREPARATION",
  "LAND PREPARATION/PLOUGHING",                   "LAND PREPARATION",
  "LAND PREPARATION -PLOUGHING",                  "LAND PREPARATION",
  "LAND PREPARATION-DOUBLE PLOUGHING",            "LAND PREPARATION",
  "LAND PREPARATION-MB PLOUGHING",                "LAND PREPARATION",
  "LAND PREPARATION-PATTA PASS",                  "LAND PREPARATION",
  "LAND PREPARATION-PATTA PAS",                   "LAND PREPARATION",
  "LAND PREPARATION-PATTA",                       "LAND PREPARATION",
  "LAND PREPARATION-PATTAPASS",                   "LAND PREPARATION",
  "LAND PREPARATION HARROWING",                   "LAND PREPARATION",
  "LAND PREPARATION-HARROWING",                   "LAND PREPARATION",
  "LAND PREPARATIONG-HARROWING",                  "LAND PREPARATION",
  "LAND PREPARATION - HARROWING",                 "LAND PREPARATION",
  "LAND PREPARATION-ROTOVATOR",                   "LAND PREPARATION",
  "LAND PREPARATION-WITH ROTOVATOR",              "LAND PREPARATION",
  "HARROWING",                                    "LAND PREPARATION",
  "LAND PREPARATION-BROAD CASTING",               "LAND PREPARATION",
  "LAND PREPARATION-PANJI",                       "LAND PREPARATION",
  "LAND PREPARATION-PUNJI",                       "LAND PREPARATION",
  "LAND PREPARATION-PHANTAN",                     "LAND PREPARATION",
  "LAND PREPARATION-V-PASS",                      "LAND PREPARATION",
  "LAND PREPARATION-PHANTAN",                     "LAND PREPARATION",
  "LAND PREPARATION-V-PASS",                      "LAND PREPARATION",
  "MAKING RIDGES & FURROWS",                      "LAND PREPARATION",
  "LAND PREPARATION-RIDGES AND FURROWS",          "LAND PREPARATION",
  "LAND PREPARATION-RIDGES & FURROWS",            "LAND PREPARATION",
  "LAND PREPARATION-MAKING RIDGES & FURROWS",     "LAND PREPARATION",
  "LAND PREPARATION-ROTAVATOR",                   "LAND PREPARATION",
  
  # UPROOTING
  "UPROOTING JASMINE",                            "UPROOTING",
  "LAND PREPARATION-UPROOTING",                   "UPROOTING",
  "LAND PREPARATION-UPROOTING BETEL VINE",        "UPROOTING",
  
  # INTERCULTURE
  "INTERCULTURE",                                 "INTERCULTURE",
  "INTERCULTURE/HOEING",                          "INTERCULTURE",
  "INTERCULTURE WITH FERTILIZER",                 "INTERCULTURE",
  "INTERCULTURE WITH EARTHING UP",                "INTERCULTURE",
  "INTERCULTURE/HOEING-SORGHUM",                  "INTERCULTURE",
  
  # FIELD CLEANING
  "LAND PREPARATION-FIELD CLEANING",              "FIELD CLEANING",
  "FIELD CLEANING",                               "FIELD CLEANING",
  
  # FENCE TRMMING
  "FENCE TRIMMING",                               "FENCE TRIMMING",
  "FENCING",                                      "FENCE TRIMMING",
  
  # TRANSPLANTING
  "PLANTING",                                     "TRANSPLANTING",
  "TRANSPLANTING",                                "TRANSPLANTING",
  "TRANSPLANTING WITH FERTILIZER",                "TRANSPLANTING",
  "TRANSPLANTING-ONION",                          "TRANSPLANTING",
  "TRANSPLANTING-SUGARCANE",                      "TRANSPLANTING",
  "TRANSPLANTING AND PLOUGHING",                  "TRANSPLANTING",
  "PLANTATION",                                   "TRANSPLANTING",
  
  # NURSERY RAISING
  "NURSERY RAISING",                              "NURSERY RAISING",
  
  # PESTICIDE
  "PESTICIDE SPAYING",                            "PESTICIDE",
  "PESTICIDE",                                    "PESTICIDE",
  "SPRAYING",                                     "PESTICIDE",
  "PESTISIDESPRAY",                               "PESTICIDE",
  
  # SOWING
  "SEED SOWING",                                  "SOWING",
  "SOWING/SOWING WITH FERTILIZER",                "SOWING",
  "SEED APPLICATION",                             "SOWING",
  "RESOWING",                                     "SOWING",
  "RESOWING WITH FERTILIZER",                     "SOWING",
  "SEED TREATMENT",                               "SOWING",
  "POTATO SOWING",                                "SOWING",
  "SOWING/SOWING WITH FERTILIZER-MAIZE",          "SOWING",
  "SOWING/SOWING WITH FERTILIZER-SORGHUM",        "SOWING",
  "SOWING/SOWING WITH FERTILIZER-SOYBEAN",        "SOWING",
  "LAND PREPARATION AND SEED SOWING",             "SOWING",
  "LAND PREPARATION AND SOWING",                  "SOWING",
  
  # HERBICIDE
  "WEEDICIDE",                                    "HERBICIDE",
  "HARBISIDE APPLICATION",                        "HERBICIDE",
  "HERBICIDE",                                    "HERBICIDE",
  "WEEDICIDE APPLICATION-PIGEONPEA",              "HERBICIDE",
  "WEEDICIDE SPRAYING",                           "HERBICIDE",
  "WEEDYSIDE SPRAY",                              "HERBICIDE",
  "DEFOLIATION",                                  "HERBICIDE",
  "WEEDICIDE APPLICATION",                        "HERBICIDE",
  "IPM & IDM TECHNOLOGIES",                       "HERBICIDE",
  
  # PLANT PROTECTION
  "PLANT PROTECTION",                             "PLANT PROTECTION",
  "PLANT PROTECTION-SOYBEAN",                     "PLANT PROTECTION",
  "PLANT PROTECTION-PIGEONEPA",                   "PLANT PROTECTION",
  "PLANT PROTECTION-PIGEONPEA",                   "PLANT PROTECTION",
  "BAGGING",                                      "PLANT PROTECTION",
  
  # HAND WEEDING
  "WEEDING",                                      "HAND WEEDING",
  "HAND WEEDING",                                 "HAND WEEDING",
  "HAND WEEDING-PIGEONPEA",                       "HAND WEEDING",
  "HAND WEEDING & THINNING",                      "HAND WEEDING",
  
  # THINNING
  "THINNING",                                     "THINNING",
  "BEDICIDE",                                     "THINNING",
  
  # FERTILIZER
  "FERTILIZER APPLICATION",                       "FERTILIZER",
  "FERTILIZER APPLICATION-PIGEONPEA",             "FERTILIZER",
  "FERTIGATION",                                  "FERTILIZER",
  "FYM/COMPOST APPLICATION",                      "FERTILIZER",
  "MICRONUTRIENT",                                "FERTILIZER",
  "MICRONUTRIENT APPLICATION",                    "FERTILIZER",
  "NUTRIENT",                                     "FERTILIZER",
  "TILIZER APPLICATION",                          "FERTILIZER",
  "APPLYING FERTILIZER",                          "FERTILIZER",
  
  # HARVESTING
  "HARVESTING",                                   "HARVESTING",
  "HARVESTING-SOYBEAN",                           "HARVESTING",
  "HARVESTING-PIGEONPEA",                         "HARVESTING",
  "HARVESTING-COTTON",                            "HARVESTING",
  "HARVESTING-SORGHUM",                           "HARVESTING",
  "HARVESTING-ONION",                             "HARVESTING",
  "HARVESTING-GROUNDNUT",                         "HARVESTING",
  "HARVESTING-ARECANUT",                          "HARVESTING",
  "HARVESTING-CHRYSANTHEMUM",                     "HARVESTING",
  "HARVESTING-BETEL VINE",                        "HARVESTING",
  "HARVESTING-BLACKGRAM",                         "HARVESTING",
  "HARVESTING-BY-PRODUCT",                        "HARVESTING",
  "HARVESTING BY-PRODUCT",                        "HARVESTING",
  "HARVESTING BY-PRODUCT-SORGHUM",                "HARVESTING",
  "HARVESTING-D LAB LAB",                         "HARVESTING",
  "HARVESTING-COCONUT",                           "HARVESTING",
  "HARVESTING-SUGARCANE",                         "HARVESTING",
  "HARVESTING-CHICKPEA",                          "HARVESTING",
  "HARVESTING-COWPEA",                            "HARVESTING",
  "HARVESTING-SORGHUM FODDER",                    "HARVESTING",
  "HARVESTING-HORSEGRAM",                         "HARVESTING",
  "HARVESTING-HULGA",                             "HARVESTING",
  "HARVESTING-MAIZE",                             "HARVESTING",
  "HARVESTING-MAIZE FODDER",                      "HARVESTING",
  "HARVESTING-MATKI",                             "HARVESTING",
  "HARVESTING-FINGER MILLET",                     "HARVESTING",
  "HERVESTING",                                   "HARVESTING",
  
  # THRESHING
  "THRESHING",                                    "THRESHING",
  "THRESHING-ARECANUT",                           "THRESHING",
  "THRESHING-BLACKGRAM",                          "THRESHING",
  "THRESHING-CHICKPEA",                           "THRESHING",
  "THRESHING-COWPEA",                             "THRESHING",
  "THRESHING-D LAB LAB",                          "THRESHING",
  "THRESHING-FINGER MILLET",                      "THRESHING",
  "THRESHING-GROUNDNUT",                          "THRESHING",
  "THRESHING-HORSEGRAM",                          "THRESHING",
  "THRESHING-HULGA",                              "THRESHING",
  "THRESHING-MAIZE",                              "THRESHING",
  "THRESHING-MATKI",                              "THRESHING",
  "THRESHING-PIGEONPEA",                          "THRESHING",
  "THRESHING-SORGHUM",                            "THRESHING",
  "THRESHING-SOYBEAN",                            "THRESHING",
  "THRESHING & TRANSPORT",                        "THRESHING",
  "THRESHING AND TRANSPORT",                      "THRESHING",
  
  # HARVESTING/THRESHING
  "THRESHING HARVESTING",                         "HARVESTING/THRESHING",
  "THRASHING HARVESTING",                         "HARVESTING/THRESHING",
  "HARVESTING AND THRESHING",                     "HARVESTING/THRESHING",
  "HARVESTING & THRESHING",                       "HARVESTING/THRESHING",
  "HARVESTING & THRESHING-SOYBEAN",               "HARVESTING/THRESHING",
  
  # WINNOWING
  "WINNOWING",                                    "WINNOWING",
  
  # TRANSPORT
  "TRANSPORT",                                    "TRANSPORT",
  "TRANSPORT-COTTON",                             "TRANSPORT",
  "TRANSPORT-PIGEONPEA",                          "TRANSPORT",
  "TRANSPORT-SORGHUM",                            "TRANSPORT",
  "TRANSPORT-SOYBEAN",                            "TRANSPORT",
  
  # IRRIGATION
  "IRRIGATION",                                   "IRRIGATION",
  "IRRIGATION-PIGEONPEA",                         "IRRIGATION",
  "IRRIGATION MANUAL",                            "IRRIGATION",
  
  # FUMIGATION
  "FUMIGATION",                                   "FUMIGATION",
  
  # ABELING
  "ABELING",                                      "ABELING",
  
  # LEVELING
  "LEVELING",                                     "LEVELING",
  "LAND PREPARATION-LEVELLING",                   "LEVELING",
  "LAND PREPARATION-HARROWING & LEVELLING",       "LEVELING",
  "PLOUGING WITH LEVELING",                       "LEVELING",
  "PLOUGHING WITH LEVELING",                      "LEVELING",
  "PLOUHGING WITH LEVELING",                      "LEVELING",
  
  # DIGGING
  "LAND PREPARATION-DIGGING",                     "DIGGING",
  "GAP FILLING/THINNING",                         "DIGGING",
  "SOIL DIGGING",                                 "DIGGING",
  "MAKING LINES",                                 "DIGGING",
  "DIGGING OF PIT",                               "DIGGING",
  "LAND PREPARATION-SOIL DIGGING",                "DIGGING",
  "LAND PREPARATION-ROUND DIGGING",               "DIGGING",
  "TRENCHING",                                    "DIGGING",
  
  # DIPPING
  "DIPPING",                                      "DIPPING",
  "DRENCHING",                                    "DIGGING",
  
  # BUNDING
  "BUNDING",                                      "BUNDING",
  "BUND MAKING",                                  "BUNDING",
  "BUND TRIMMING",                                "BUNDING",
  "BUND REPAIR",                                  "BUNDING",
  "FARM BUNDING",                                 "BUNDING",
  "WATER CHANNEL",                                "BUNDING",
  "LAND PREPARATION-WATER CHANNEL",               "BUNDING",
  "LAND PREPARATION-MAKING BASIN",                "BUNDING",
  "LAND PREPARATION-BUND REPAIR",                 "BUNDING",
  "LAND PREPARATION-BUND MAKING",                 "BUNDING",
  "LAND PREPARATION-BUND CLEANING",               "BUNDING",
  "LAND PREPARATION-RING BASIN PREPARATION",      "BUNDING",
  "LAND PREPARATION-FARM BUNDING",                "BUNDING",
  
  # BY PRODUCT MAKING
  "BY PRODUCT MAKING",                            "BY PRODUCT MAKING",
  
  # SUPERVISION
  "WATCHING",                                     "SUPERVISION",
  "SUPERVISION",                                  "SUPERVISION",
  
  # PINCHING/CUTTING
  "PRUNING",                                      "PINCHING/CUTTING",
  "PINCHING",                                     "PINCHING/CUTTING",
  "CUTTING",                                      "PINCHING/CUTTING",
  "NIPPING",                                      "PINCHING/CUTTING",
  "PRUNING/PINCHING",                             "PINCHING/CUTTING",
  "AIR LAYERING",                                 "PINCHING/CUTTING",
  
  # MULCHING
  "MULCHING",                                     "MULCHING",
  "MANURING",                                     "MULCHING",
  
  # POD COLLECTION
  "POD COLLECTION",                               "POD COLLECTION",
  
  # GRADING/TAGGING
  "GRADING",                                      "GRADING/TAGGING",
  "TAGGING",                                      "GRADING/TAGGING",
  
  # LOADING
  "LOADING",                                      "LOADING",
  "STACKING",                                     "LOADING",
  "PACKING OF RAISINS",                           "LOADING",
  
  # CURING
  "CURING",                                       "CURING",
  
  # TRANSFORMATION
  "PROCESSING OF ARECANUT",                       "TRANSFORMATION",
  "PROCESSING OF ARACANUT",                       "TRANSFORMATION",
  "REMOVING RAISINS FROM RAISIN SHED",            "TRANSFORMATION",
  "CLEANING OF RAISIN SHED",                      "TRANSFORMATION",
  "PACKING OF RAISINS",                           "TRANSFORMATION",
  
  # GIRDLING
  "GIRDLING",                                     "GIRDLING",
  "GRIDLING",                                     "GIRDLING"
)
```

```{r}
# Créer un ID des opérations
correspondances_oper <- correspondances_oper |>
  arrange(OPERATION, OPERATION_VARIANT) |>
  mutate(OPER_ID = sprintf("C%02d", row_number()))

# Ajouter OPERATION_ID dans Cultivation_2014
Cultivation_2014 <- Cultivation_2014 |>
  rename(OPERATION_VARIANT = OPERATION) |>
  left_join(correspondances_oper |> select(OPERATION_VARIANT, OPERATION, OPER_ID),
          by = "OPERATION_VARIANT")
```

```{r}
# Diviser les opérations qui regroupent plusieurs catégories en deux variables

# Tableau de correspondances des opérations regoupant plusieurs catégories
operation_divisees <- tribble(
~OPERATION_VARIANT,                       ~OPER_1,           ~OPER_2,
"LAND PREPARATION-HARROWING & LEVELLING", "LAND PREPARATION","LEVELING",
"PLOUGING WITH LEVELING",                 "LAND PREPARATION","LEVELING",
"PLOUGHING WITH LEVELING",                "LAND PREPARATION","LEVELING",
"PLOUHGING WITH LEVELING",                "LAND PREPARATION","LEVELING",
"LAND PREPARATION-HARROWING & LEVELLING", "LAND PREPARATION","LEVELING",
"LAND PREPARATION-FIELD CLEANING",        "LAND PREPARATION", "FIELD CLEANING",
"LAND PREPARATION-BUND CLEANING",         "LAND PREPARATION", "BUNDING",
"LAND PREPARATION-BUND MAKING",           "LAND PREPARATION", "BUNDING",
"LAND PREPARATION-BUND REPAIR",           "LAND PREPARATION", "BUNDING",
"LAND PREPARATION-RING BASIN PREPARATION","LAND PREPARATION", "BUNDING",
"LAND PREPARATION-WATER CHANNEL",         "LAND PREPARATION", "BUNDING",
"LAND PREPARATION-FARM BUNDING",          "LAND PREPARATION", "BUNDING",
"LAND PREPARATION-DIGGING",               "LAND PREPARATION", "DIGGING",
"LAND PREPARATION-SOIL DIGGING",          "LAND PREPARATION", "SOIL DIGGING",
"LAND PREPARATION-ROUND DIGGING",         "LAND PREPARATION", "DIGGING",
"LAND PREPARATION-UPROOTING",             "LAND PREPARATION", "UPROOTING",
"LAND PREPARATION-UPROOTING BETEL VINE",  "LAND PREPARATION", "UPROOTING",
"THRASHING HARVESTING",                   "HARVESTING",       "THRESHING",
"THRESHING HARVESTING",                   "HARVESTING",       "THRESHING",
"THRESHING-HARVESTING",                   "HARVESTING",       "THRESHING",
"HAND WEEDING & THINNING",                "HAND WEEDING",     "THINNING",
"HARVESTING AND THRESHING",               "HARVESTING",       "THRESHING",
"HARVESTING & THRESHING-SOYBEAN",         "HARVESTING",       "THRESHING",
"INTERCULTURE WITH EARTHING UP",          "INTERCULTURE",     "EARTHING UP",
"GAP FILLING/THINNING",                   "GAP FILLING",      "THINNING",
"TRANSPLANTING AND PLOUGHING",            "TRANSPLANTING",    "PLOUGHING",
"THRESHING & TRANSPORT",                  "THRESHING",        "TRANSPORT",
"THRESHING AND TRANSPORT",                "THRESHING",        "TRANSPORT",
"PLOUGHING AND SEED SOWING",                "LAND PREPARATION","SOWING",
"PLOUGHING AND SEED SOWING WITH FERTILIZER","LAND PREPARATION","SOWING"
)
```

```{r, warning=FALSE}
# Ajouter le tableau de correspondance des opérations divisées dans Cultivation_2014
Cultivation_2014 <- Cultivation_2014 |>
  left_join(operation_divisees, by = c("OPERATION_VARIANT"))

cat("Nombre de lignes ayant plusieurs opérations  :", sum(!is.na(Cultivation_2014$OPER_2)), "\n")
cat("Pourcentage du total :", sum(!is.na(Cultivation_2014$OPER_2))/sum(is.na(Cultivation_2014$OPER_2)), "%")
```

## Créations de variables

### Heure de travail par hectare
```{r}
# Créer la variable WORK_PER_AREA, nombre d'heures par hectare
Cultivation_2014 <- Cultivation_2014 |>
  mutate(
    HR_PER_ACRE = if_else(PLOT_AREA == 0, NA_real_, WORK_HR / PLOT_AREA)
  )
Cultivation_2014$HR_PER_ACRE <- round(Cultivation_2014$HR_PER_ACRE, 4)
```

### Salaire horaire

```{r}
Cultivation_2014$WAGE <- as.numeric(as.character(Cultivation_2014$WAGE))
Cultivation_2014$WAGE <- round(Cultivation_2014$WAGE, 0)

Cultivation_2014 <- Cultivation_2014 |>
  mutate(WAGE_PER_HR = WAGE / WORK_HR)
Cultivation_2014$WAGE_PER_HR <- round(Cultivation_2014$WAGE_PER_HR, 2) 
```

```{r}
Cultivation_2014 <- Cultivation_2014 |>
  relocate(OPERATION, .after = OPERATION_VARIANT) |>
  relocate(OPER_ID, .before = OPERATION) |>
  relocate(OPERATION_VARIANT, .before = OPER_1) |>
  relocate(HR_PER_ACRE, .after = WORK_HR) |>
  relocate(WAGE_PER_HR, .after = WAGE) 
```

# Liens extérieurs

## Enregistrer Cultivation_2014 dans le document partagé

```{r}
# Définir le chemin du dossier
folder_path <- "C:/Users/documentation/OneDrive - Université Paris-Dauphine/CDD projet Inde/Data sources/R Project- Micro database/Base de données générées/Cultivation_2014"

# Créer le dossier s'il n'existe pas
if (!dir.exists(folder_path)) {
  dir.create(folder_path, recursive = TRUE)
}

# Enregistrer le fichier CSV
write.csv(
  Cultivation_2014,
  file = file.path(folder_path, "Cultivation_2014.csv"),
  row.names = FALSE
)

# Enregistrer le fichier RDS
saveRDS(
  Cultivation_2014,
  file = file.path(folder_path, "Cultivation_2014.rds"),
)
```

