---
title: "INCRESAT_Micro_database_merging"
author: "Lucile DUBARRY"
format: html
code-fold: true
echo: false
---

```{r}
rm(list = ls())
graphics.off()
cat("\014")
```

```{r}
#| message: false
here::i_am("INCRESAT_Micro_database.Rproj")
library(dplyr)
library(tidyr)
library(readxl)
```
## Importer les données

```{r Importer les données, message=FALSE, warning=FALSE}
# J'importe les bases de données Micro de l'année 2014 pour les régions SAT et EAST India. Les 3 blocs suivants visent à regouper ces deux régions en un seul fichier, pour chaque sujet (Household, Landholding, Cultivation, Employment).

EAST_Household_details_2014 <- read_excel("raw_data/EAST INDIA_Household details_2014.xlsx")
SAT_Household_details_2014 <- read_excel("raw_data/SAT INDIA_Household details_2014.xlsx")

EAST_Landholding_details_2014 <- read_excel("raw_data/EAST INDIA_Landholding details_2014.xlsx")
SAT_Landholding_details_2014 <- read_excel("raw_data/SAT INDIA_Landholding details_2014.xlsx")

EAST_Employment_2014 <- read_excel("raw_data/EAST_Employment_2014.xlsx")
SAT_Employment_2014 <- read_excel("raw_data/SAT_Employment_2014.xlsx")

EAST_Cultivation_2014 <- read_excel("raw_data/EAST_Cultivation_Output_2014.xlsx")
SAT_Cultivation_1_2014 <- read_excel("raw_data/SAT_Cultivation_Output_2014.xlsx")
SAT_Cultivation_2_2014 <- read_excel("raw_data/SAT_Cultivation_Info_2014.xlsx")
```
## Rassembler pour chaque base les données pour les 2 régions (SAT et EAST INDIA)

```{r Harmoniser les types de chaque colonne}
# Je repère si les colonnes ayant le même nom (elles vont être fusionner avec le bind_rows) et vérifie si elles sont du même type  (numeric ou character). Dans le cas de colonnes avec le même nom mais d'un type différent, je les convertis en character, ce qui limite le nombre de NA. IL est nécessaire que les colonnes soient du même type pour utiliser la fonction bind_rows. 

common_cols_household <- intersect(names(EAST_Household_details_2014), names(SAT_Household_details_2014))
for (col in common_cols_household) {
    EAST_Household_details_2014[[col]] <- as.character(EAST_Household_details_2014[[col]])
    SAT_Household_details_2014[[col]] <- as.character(SAT_Household_details_2014[[col]])
}

common_cols_landholding <- intersect(names(EAST_Landholding_details_2014), names(SAT_Landholding_details_2014))
for (col in common_cols_landholding) {
    EAST_Landholding_details_2014[[col]] <- as.character(EAST_Landholding_details_2014[[col]])
    SAT_Landholding_details_2014[[col]] <- as.character(SAT_Landholding_details_2014[[col]])
}

common_cols_Employment <- intersect(names(EAST_Employment_2014), names(SAT_Employment_2014))
for (col in common_cols_Employment) {
  EAST_Employment_2014[[col]] <- as.character(EAST_Employment_2014[[col]])
  SAT_Employment_2014[[col]] <- as.character(SAT_Employment_2014[[col]])
}
```

```{r Rassembler les bases pour Cultivation SAT INDIA}
# La fonction suivante vise à vérifier que les champs soient uniques.
any(duplicated(SAT_Cultivation_1_2014[, c("VDS_ID", "PLOT_CODE", "CROP", "SEASON", "VAR_NAME")]))
any(duplicated(SAT_Cultivation_2_2014[, c("VDS_ID", "PLOT_CODE", "SEASON")]))
# J'obtiens FALSE pour les deux bases de données, cela signifie que les champs sont identifiés de manière unique selon ces caractéristiques.

# Je réunis en un seul fichier les bases de données pour Cultivation SAT INDIA en faisant la jonction avec le numéro d'identification du ménage: VDS_ID, le code du champ: PLOT_CODE et la saison: SEASON.Avec cette méthode, 
SAT_Cultivation_2014 <- full_join(SAT_Cultivation_1_2014, SAT_Cultivation_2_2014, by = c('VDS_ID', 'PLOT_CODE', 'SEASON'))

any(duplicated(SAT_Cultivation_1_2014[, c("VDS_ID", "PLOT_CODE","SEASON")]))
# J'obtiens TRUE avec ces caractéristiques, cela signifie qu'il y a des champs en double avec les mêmes variables code/ménage/saison. Avec la fonction full_join, j'applique les données de la 2e base à tous ces doublons. Selon moi, c'est ok parce que les infos de la 2e base s’appliquent à toutes les cultures/variétés d’un champ et parce qu'il n'y a pas de doublon dans la 2e base (on évite de créer un produit croisé).

# Je supprime la colonne PLOT_AREA en doublon.
SAT_Cultivation_2014 <- SAT_Cultivation_2014 |> 
  select(-PLOT_AREA.y) |>
  rename(PLOT_AREA = PLOT_AREA.x)
```

```{r Assembler les deux régions en un fichier}
Household_details_2014 <- bind_rows(EAST_Household_details_2014, SAT_Household_details_2014)

Landholding_details_2014 <- bind_rows(EAST_Landholding_details_2014, SAT_Landholding_details_2014)

Employment_2014 <- bind_rows(EAST_Employment_2014, SAT_Employment_2014)

Cultivation_2014 <- bind_rows(EAST_Cultivation_2014, SAT_Cultivation_2014)
```

## Vérifier l'unicité des données pour chaque base

```{r Cultivation}
# Je n'ai pas créé des doublons avec la fonction full join (hourra!), mais ils proviennent de la base EAST_Cultivation. Les doublons diffèrent les uns des autres selon les variables RENT_FOR, IRRI_AREA, PRCT AREA, OP_BY_PROD_QTY et RENT_VAL. 
any(duplicated(EAST_Cultivation_2014[, c("VDS_ID", "PLOT_CODE", "CROP", "SEASON", "VAR_NAME")]))

# Tableau des champs en double dans la base Cultivation
dup_rows_Cultivation_2014 <- Cultivation_2014 |>
  group_by(VDS_ID, PLOT_CODE, CROP, SEASON, VAR_NAME) |>
  filter(n() > 1) |>
  ungroup()
```

```{r Landholding details}
any(duplicated(Landholding_details_2014[!is.na(Landholding_details_2014$SOIL_TYPE), c("VDS_ID", "PLOT_CODE")]))
# Aucun doublon, en excluant les NA pour SOIL_TYPE. Soil Type est la variable qui m'intéresse dans cette base.
```

```{r Employment}
# Vérifier s'il y a des personnes dans le même ménage "VDS_ID" interviewée à la même date "DT_INT"/"SUR_MMO_YR" avec le même code "PRE_MEM_ID", pour le même travail "WORK_TYPE"/"CO_NF_WORK". 
any(duplicated(Employment_2014[!is.na(Employment_2014$PRE_MEM_ID), c("VDS_ID", "PRE_MEM_ID", "DT_INT", "SUR_MON_YR", "WORK_TYPE", "CO_NF_WORK")]))

dup_rows_Employment_2014 <- Employment_2014 |>
  filter(!is.na(PRE_MEM_ID)) |>
  group_by(VDS_ID, PRE_MEM_ID, DT_INT) |>
  filter(n() > 1) |>
  ungroup()

identical_rows_Employment_2014 <- Employment_2014 |>
  filter(!is.na(PRE_MEM_ID)) |>
  group_by(across(everything())) |>
  filter(n() > 1) |>
  ungroup()
```

```{r Household details}
# Vérifier que les membres de chaque ménage soient uniques en fonction du ménage (VDS-ID) et du code membre (PRE_MEM_ID).
any(duplicated(Household_details_2014[!is.na(Household_details_2014$PRE_MEM_ID), c("VDS_ID", "PRE_MEM_ID")]))
# TRUE : 22 personnes pas identifiées! Il y a des ménages dont plusieurs membres ont le même numéro d'identification. Ils sont différenciés par un autre code d'identification "SL_NO", qui n'est pas présent dans les bases Employment, Landholding et Cultivation.
```

```{r Vérifier le nombre de ménages dans chaque base}
# Je compte les ménages avec un VDS_ID différent dans chaque base.  
Total_ménages <- tibble(
  Base = c("Employment", "Cultivation", "Landholding", "Household"),
  Données_regroupées = c(
    n_distinct(Employment_2014$VDS_ID),
    n_distinct(Cultivation_2014$VDS_ID),
    n_distinct(Landholding_details_2014$VDS_ID),
    n_distinct(Household_details_2014$VDS_ID)
  ),
  EAST_plus_SAT = c(
    n_distinct(EAST_Employment_2014$VDS_ID) + n_distinct(SAT_Employment_2014$VDS_ID),
    n_distinct(EAST_Cultivation_2014$VDS_ID) + n_distinct(SAT_Cultivation_2014$VDS_ID),
    n_distinct(EAST_Landholding_details_2014$VDS_ID) + n_distinct(SAT_Landholding_details_2014$VDS_ID),
    n_distinct(EAST_Household_details_2014$VDS_ID) + n_distinct(SAT_Household_details_2014$VDS_ID)
  )
)
# Même nombre entre le total et la somme des 2 bases SAT + EAST donc les différences en termes de ménages ne viennent pas du regroupement des bases. Alors d'où vient la différence ? Aucune idée, faut que je vérifie le nombre de lignes total
```

## Supprimer les doublons et lignes inutiles pour chaque base
```{r Employment}
# Je supprime les lignes dans lesquelles seules les variables descriptives de la personne interviewée sont remplies.
Employment_2014 <- Employment_2014 |>
  filter(rowSums(!is.na(select(., -VDS_ID, -PRE_MEM_ID, -SUR_MON_YR, -SUR_YR, -DT_INT, -OLD_MEM_ID))) > 0)

# Je supprime les lignes pour lesquelles la date de l'interview est identique mais le mois de l'étude change. 
Employment_2014 <- Employment_2014 |>
  group_by(VDS_ID, PRE_MEM_ID, DT_INT) |>
  mutate(n_month = n_distinct(SUR_MON_YR)) |>
  filter(n_month == 1 | (n_month > 1 & row_number() == 1)) |>
  ungroup() |>
  select(-n_month)

# Je supprime les lignes dans lesquelles PRE_MEM_ID n'est pas indiqué et les lignes identiques. 
Employment_2014 <- Employment_2014 |>
  filter(!is.na(PRE_MEM_ID)) |>
  distinct()

dup_rows_Employment_2014 <- Employment_2014 |>
  filter(!is.na(PRE_MEM_ID)) |>
  group_by(VDS_ID, PRE_MEM_ID, DT_INT, WORK_TYPE, CO_NF_WORK, WORK_PLACE) |>
  filter(n() > 1) |>
  ungroup()
``` 

```{r Landholding details}
Landholding_details_2014 <- Landholding_details_2014 |>
  filter(!is.na(SOIL_TYPE))
```

```{r Cultivation}
Cultivation_2014 <- Cultivation_2014 |>
  group_by(VDS_ID, PLOT_CODE, CROP, SEASON, VAR_NAME) |>
  mutate(na_count = rowSums(is.na(across(everything())))) |>
  slice_min(order_by = na_count, n = 1, with_ties = FALSE) |>
  ungroup() |>
  select(-na_count)
# je suis pas sure de ce code, je comprends pas toutes les étapes..
```

```{r Household details}
# Je supprime les lignes dans lesquelles PRE_MEM_ID n'est pas indiqué et les lignes identiques. 
Household_details_2014 <- Household_details_2014 |>
  filter(!is.na(PRE_MEM_ID)) |>
  distinct()
```
