---
title: "Régression (partie 1) : Analyse du travail total par acre selon la caste"
format: html
editor: source
---

```{r, message=FALSE, warning=FALSE}
rm(list = ls())
graphics.off()
cat("\014")
```

```{r, message=FALSE, warning=FALSE}
here::i_am("ICRESAT_database_analysis/Analyse_caste.qmd")
library(dplyr)
library(tidyr)
library(readxl)
library(ggplot2)
library(scales)
library(knitr)
library(tibble)
library(tidyverse)
library(gt)
library(xtable)
library(modelsummary)
```

```{r}
Cultivation_expand <- readRDS(here::here("Base de données générées", "Cultivation_expand", "Cultivation_expand.rds"))
```

```{r}
PlotList <- readRDS(here::here("Base de données générées", "PlotList_2014", "Plotlist_2014.rds"))

PlotList$CROP_AREA <- as.numeric(as.character(PlotList$CROP_AREA))
PlotList$PLOT_AREA <- as.numeric(as.character(PlotList$PLOT_AREA))
```


********************************************************************************

## Préparer les tables

Je construis pour les régressions des tables à plusieurs niveaux : au niveau du ménage (une ligne par ménage), du champ (subplot) et de l'opération.


### Gérer les doublons

*Doublons présents avant modification*

```{r}
# Vérifier les doublons présents dnas Cultivation_expand avout toute modification
dup_plots_paddy <- Cultivation_expand |>
  filter(SEASON == "KHARIF") |>
  select(VDS_ID, PLOT_CODE, SUB_PLOT_CODE, SEASON, CROP, AREA_HH, PLOT_AREA, AREA_CROP, VAR_TYPE, VAR_NAME, REGION, STATE, VILLAGE, VILLAGE_CROP, CASTE_GROUP, CASTE, IRRI_CROP, IRRIGATION, CROP_ID, MULTI_CROPING, with_paddy, paddy_prct, OP_MAIN_PROD_QTY, OP_MAIN_PROD_UNIT, SOIL_TYPE, SOIL_FERT, SOIL_DEGR, SOIL_DEPTH, SLOPE) |>
  distinct() |>
  group_by(VDS_ID, SUB_PLOT_CODE, AREA_CROP) |>
  filter(n() > 1) |>
  mutate(row_in_group = row_number()) |> 
  ungroup()
```

Il y a des champs en double dans la table Cultivation_expand à cause de OP_MAIN_PROD_QTY et OP_MAIN_PROD_UNIT. Une fois ces variables enlevées, il faut distinct la table.


CODE A REVOIR: Supprimer les doublons causés par OP
test_cultivation_expand <- Cultivation_expand |>
  group_by(across(-c(OP_MAIN_PROD_UNIT, OP_MAIN_PROD_QTY))) |>
  summarise(
    OP_MAIN_PROD_QTY = first(na.omit(OP_MAIN_PROD_QTY), default = NA),
    OP_MAIN_PROD_UNIT = first(na.omit(OP_MAIN_PROD_UNIT), default = NA),
    .groups = "drop"
  ) |>
  distinct()

test_cultivation_expand |>
  group_by(across(-c(OP_MAIN_PROD_UNIT, OP_MAIN_PROD_QTY))) |>
  filter(n() > 1)

```{r}
# Supprimer les doublons causés par OP
Cultivation_expand <- Cultivation_expand |>
  select(-c(OP_MAIN_PROD_QTY, OP_MAIN_PROD_UNIT)) |>
  distinct()
```


*Sélection des variables d'intérêt*

```{r}
Cultivation_expand <- Cultivation_expand |>
  filter(SEASON == "KHARIF",
         AREA_CROP != 0) |>   # Enlever les champs dont la superficie est nulle

# Sélectionner les variables d'intérêt
  select(VDS_ID, CASTE_GROUP, PLOT_CODE, SUB_PLOT_CODE, CROP, SEASON, AREA_HH,
         PLOT_AREA, AREA_CROP, OPERATION, LAB_TYPE, WORK_HR, IRRIGATION,
         MACHINERY, VAR_TYPE, with_paddy, paddy_prct, REGION, STATE, VILLAGE,
         VILLAGE_CROP, SOIL_TYPE, SOIL_FERT, SOIL_DEGR, SOIL_DEPTH, SLOPE)
```


********************************************************************************

### Conserver une ligne par opération et type de travail

*Modifier Machinery*

Pour ne conserver qu'une ligne par opération et type de travail pour chaque champ, j'harmonise la variable MACHINERY au niveau de l'opération. 

Je modifie la variable Machinery telle que pour chaque champ, une opération est considérée mécanisée si au moins un outil a été utilisé pour cette opération, à n'importe quel moment de la saison. 

Rappel: La variable Machinery indique 'mécanisé' si l'opération a nécessité un outil (TR, SP, DS, SM, PT, ET, CH, TH, SD, MK, DP) ou si la variable TYPE_MAT indique 'Machinery' (concerne également AUTO et CYCLE WEEDER).

```{r}
# Identifier les champs ayant utilisé des outils pendant la saison pour chaque opération
Cultivation_expand <- Cultivation_expand |>
  group_by(VDS_ID, PLOT_CODE, SUB_PLOT_CODE, AREA_CROP, CROP, SEASON, OPERATION) |>
  mutate(MACHINERY = any(MACHINERY == "Mécanisé")) |>
  ungroup()
```

Si on souhaite considérer les opérations sans heure de travail (Machinery = n/a) comme non mécanisée : ajouter MACHINERY = replace_na(MACHINERY, "Non mécanisé"), sachant que cela change le sens du coefficient pour le régression. 

Ensuite, j'identifie les champs dont le labour est mécanisé. 

```{r}
# Identifier les champs mécanisant land preparation 
mechanized_tilling <- Cultivation_expand |>
  filter(OPERATION == "LAND PREPARATION") |>
  group_by(VDS_ID, PLOT_CODE, SUB_PLOT_CODE, AREA_CROP, CROP, SEASON) |>
  reframe(mechanized_tilling = any(MACHINERY == TRUE))

# Ajouter la variable à Cultivation_expand
Cultivation_expand <- Cultivation_expand |>
  left_join(mechanized_tilling, by = c("VDS_ID", "PLOT_CODE", "SUB_PLOT_CODE", "AREA_CROP", "CROP", "SEASON"))
```


*Sommer les heures de travail par opération*

J'additionne les heures de travail par opération et par type de travail pour un même champ, pour n'avoir qu'une seule ligne par champ pour chaque opération et type de travail distincts. 

```{r}
Cultivation_expand <- Cultivation_expand |>
  filter(LAB_TYPE != "6") |>
  group_by(across(-"WORK_HR")) |>
  summarise(WORK_HR = sum(WORK_HR, na.rm = TRUE), .groups = "drop")
```


********************************************************************************

### Modifier les variables

*Ajouter Hand weeding*

Je veux identifier les champs qui font du hand weeding pendant la saison.

```{r}
# Identifier les champs faisant du hand weeding
hh_hand_weeding <- Cultivation_expand |>
  filter(OPERATION == "HAND WEEDING") |>
  group_by(VDS_ID, PLOT_CODE, SUB_PLOT_CODE, AREA_CROP, CROP, SEASON) |>
  reframe(hand_weeding = any(WORK_HR > 0, na.rm = TRUE))

# Ajouter la variable à Cultivation_expand
Cultivation_expand <- Cultivation_expand |>
  left_join(hh_hand_weeding, by = c("VDS_ID", "PLOT_CODE", "SUB_PLOT_CODE", "AREA_CROP", "CROP", "SEASON"))
```


*Expliciter les variables sur soil characteristics*

- Type de terre (Soil_type) : 
1=Red, 2=Shallow black/Murrum, 3=Medium Black, 4=Deep Black, 5=Sandy, 6=Loam, 7=Sandy loam, 8=Clay, 9=Clay loam, 10=Problematic soils (Saline/alkaline,etc.), 11=Others (specificied in SOIL_TYPE_OT)

- Dégradation du sol (Soil_degr) : 
1=No problem, 2=Soil erosion, 3=Nutrient depletion, 4=Water logging, 5=Salinity/Acidity, 6=Others

- Fertilité du champ (Soil_fert) :
1=Very poor, 2=Poor, 3=Good, 4=Very good 

- Inclination du champ (Slope) : 
1=Leveled 0-1%, 2=Slight slope 1-3%, 3=Medium slope 3-10%, 4=High slope >10% 

- Profondeur du champ (soil_depth) : Average soil depth in centimeters

```{r}
# Convertir en numériques les variables sur soil characteristics
Cultivation_expand <- Cultivation_expand |>
  mutate(SOIL_DEPTH = as.numeric(as.character(SOIL_DEPTH)),
         SOIL_FERT = as.numeric(as.character(SOIL_FERT)),
         SLOPE = as.numeric(as.character(SLOPE)))

# Définir les catégories de référence pour les variables catégorielles
Cultivation_expand$SOIL_TYPE <- factor(Cultivation_expand$SOIL_TYPE)
Cultivation_expand$SOIL_TYPE <- relevel(Cultivation_expand$SOIL_TYPE, ref = "1")

Cultivation_expand$SOIL_DEGR <- factor(Cultivation_expand$SOIL_DEGR)
Cultivation_expand$SOIL_DEGR <- relevel(Cultivation_expand$SOIL_DEGR, ref = "1")
```


*Réécrire les variables en dummies*

```{r}
Cultivation_expand <- Cultivation_expand |>
  mutate(
    mechanized_tilling = if_else(mechanized_tilling, "1", "0"),
    IRRIGATION = recode(IRRIGATION, `Irrigué` = "1", `Non irrigué` = "0"),
    REGION = recode(REGION, `EAST` = "1", `SAT` = "0")
    )
```

Si on considère les n/a de Machinery comme "Non mécanisé", on peut ajouter : MACHINERY = if_else(MACHINERY, "1", "0"),

Je définie les catégories de référence pour STATE et VILLAGE.

```{r}
# State
Cultivation_expand$STATE <- factor(Cultivation_expand$STATE)
Cultivation_expand$STATE <- relevel(Cultivation_expand$STATE, ref = "AP")

# Village
Cultivation_expand$VILLAGE <- factor(Cultivation_expand$VILLAGE)
Cultivation_expand$VILLAGE <- relevel(Cultivation_expand$VILLAGE, ref = "AP14C")

# Caste
Cultivation_expand$CASTE_GROUP <- factor(Cultivation_expand$CASTE_GROUP)
Cultivation_expand$CASTE_GROUP <- relevel(Cultivation_expand$CASTE_GROUP, ref = "BC")
```

La fonction lm() crée automatiquement des dummies (n - 1), avec la modalité omise étant la catégorie de référence. 


*Sommer les champs d'un même ménage*

Je calcule la superficie totale de tous les champs d'un même ménage, pour toutes les cultures (dont le riz) en Kharif.  

PLUS BESOIN ? Vérifier la cohérence de AREA_HH entre Plotlist et Cultivation

```{r}
plotlist_area_hh <- PlotList |>
  filter(SEASON %in% c("Kharif", "KHARIF")) |>
  distinct(VDS_ID, SUB_PLOT_CODE, PLOT_CODE, CROP_AREA) |>
  group_by(VDS_ID) |>
  summarise(AREA_HH = sum(CROP_AREA, na.rm = TRUE), .groups = "drop")
```

J'ai utilisé la table PlotList (sans aucune modification) pour calculer la somme des terres par ménage, seulement pour Kharif, en incluant les champs en jachère. 


*Superficie au carré*

```{r}
Cultivation_expand <- Cultivation_expand |>
  mutate(AREA_CROP_SQ = AREA_CROP^2,
         PLOT_AREA_SQ = PLOT_AREA^2,
         AREA_HH_SQ = AREA_HH^2)
```


********************************************************************************

### Tables pour les régressions

#### Au niveau de l'opération

```{r}
Cultivation_paddy <- Cultivation_expand |>
  filter(CROP == "PADDY")
```

##### Tout type de travail confondu

*Heures de travail par acre par champ*

```{r}
# Additionner les heures de travail par champ
Cultivation_oper <- Cultivation_expand |>
  group_by(across(-c("WORK_HR", "LAB_TYPE"))) |>
  summarise(OPER_HRS = sum(WORK_HR, na.rm = TRUE), .groups = "drop") |>

# Diviser les heures totales par acre
  mutate(HACRE_OPER = OPER_HRS/AREA_CROP)
```

```{r}
# Vérifier les doublons restants après avoir sélectionné les variables
Cultivation_oper |>
  group_by(VDS_ID, PLOT_CODE, SUB_PLOT_CODE, AREA_CROP) |>
  filter(n_distinct(AREA_CROP) > 1 |
         n_distinct(AREA_HH) > 1 |
         n_distinct(with_paddy) > 1 |
         n_distinct(paddy_prct) > 1 |
         n_distinct(VAR_TYPE) > 1 |
         n_distinct(CASTE_GROUP) > 1 |
         n_distinct(STATE) > 1 |
         n_distinct(VILLAGE) > 1) |>
  mutate(row_in_group = row_number()) |>
  ungroup()
```

##### Par type de travail

Je calcule les heures de travail par champ, en différenciant par le type de travail. 

```{r}
# 1. Somme des heures de travail par champ, caste et lab_type
Cultivation_labor <- Cultivation_expand |>
  group_by(across(-WORK_HR)) |>
  summarise(WORK_HR = sum(WORK_HR, na.rm = TRUE), .groups = "drop") |>

# 2. Pivoter et créer les valeurs 0 quand le travail est nul
  pivot_wider(
    names_from = LAB_TYPE,
    values_from = WORK_HR,
    values_fill = 0
  ) |>

# 3. Calculer le travail total selon le genre
  mutate(
    hired_work = HF + HM, 
    WORK_F = HF + FF + EF,
    WORK_M = HM + FM + EM,
    WORK_O = OB + HB + EB + FB
  )
```

```{r}
# Diviser les heures de travail par acre
Cultivation_labor <- Cultivation_labor |>
  group_by(across(everything())) |>
  mutate(hired_work_hacre = hired_work/AREA_CROP,
         FF_HACRE = FF/AREA_CROP,
         HF_HACRE = HF/AREA_CROP,
         EF_HACRE = EF/AREA_CROP,
         HM_HACRE = HM/AREA_CROP,
         FM_HACRE = FM/AREA_CROP,
         EM_HACRE = EM/AREA_CROP,
         OB_HACRE = OB/AREA_CROP,
         HB_HACRE = HB/AREA_CROP,
         EB_HACRE = EB/AREA_CROP,
         FB_HACRE = FB/AREA_CROP,
         WORK_F_HACRE = WORK_F/AREA_CROP,
         WORK_M_HACRE = WORK_M/AREA_CROP,
         WORK_O_HACRE = WORK_O/AREA_CROP,
         .groups = "drop")
```


#### Au niveau du ménage

```{r}
# Filtrer pour les villages dont la culture dominante est le riz
Cultivation_hh <- Cultivation_labor |>
  filter(VILLAGE_CROP == "PADDY") |>

# 1. Somme des heures de travail en fonction de lab_type, au niveau du ménage
  group_by(VDS_ID, CASTE_GROUP, CROP, SEASON, AREA_HH, AREA_HH_SQ, with_paddy, paddy_prct, REGION, STATE, VILLAGE, VILLAGE_CROP) |>
  summarise(FF = sum(FF, na.rm = TRUE),
            HF = sum(HF, na.rm = TRUE),
            FM = sum(FM, na.rm = TRUE),
            HM = sum(HM, na.trm = TRUE),
            WORK_F = sum(WORK_F, na.rm = TRUE),
            WORK_M = sum(WORK_M, na.rm = TRUE),
            .groups = "drop") |>
  
# 2. Diviser les heures de travail par l'ensemble des terres du ménage
  group_by(across(everything())) |>
  summarise(FF_HACRE = FF/AREA_HH,
            HF_HACRE = HF/AREA_HH,
            HM_HACRE = HM/AREA_HH,
            FM_HACRE = FM/AREA_HH,
            WORK_F_HACRE = WORK_F/AREA_HH,
            WORK_M_HACRE = WORK_M/AREA_HH,
            .groups = "drop")
```



********************************************************************************

## Régressions

## Au niveau de l'opération

### Tout type de travail confondu

L'objectif de ces premières régressions est de comprendre pourquoi on observe un différence de l'intensité du travail (Hr/acre) entre les castes, même après avoir contrôler pour plusieurs variables (mécanisation, superficie du champ). 

Niveau d'analyse : On se concentre au niveau des opérations par champ. 
p = plot ; H = Household ; o = opération. 

Outcome : Travail total par acre, tout type de travail confondu. 

On se concentre sur la culture du riz (en Kharif). 

```{r}
Cultivation_oper <- Cultivation_oper |>
  filter(CROP == "PADDY")
```

#### Toutes opérations

```{r}
reg_all_oper <- lm(HACRE_OPER ~ CASTE_GROUP + AREA_CROP + AREA_CROP_SQ + AREA_HH 
                   + AREA_HH_SQ + IRRIGATION + MACHINERY + mechanized_tilling 
                   + STATE, data = Cultivation_oper)
summary(reg_all_oper)
```

Attention : Il y a beaucoup d'observations effacées à cause des n/a de Machinery. 

Attention : On ne peut pas mettre à la fois STATE et VILLAGE dans la régression. 
Il y a un problème de colinéarité parfaite entre STATE et VILLAGE, car chaque village appartient exactement à un seul state. Donc connaître le village suffit à déterminer le state et inversement. 

Code pour Var_type : 
- 1 = Local (catégorie de référence),
- 2 = HYV,
- 3 = Hybrid,
- 4 = BT,
- 5 = Others


#### Par opération

Je refais la régression pour les opérations principales du riz en Kharif. 

```{r}
reg_land <- Cultivation_oper |>
  filter(OPERATION == "LAND PREPARATION") |>
  lm(formula = HACRE_OPER ~ CASTE_GROUP + AREA_CROP + AREA_CROP_SQ + AREA_HH + AREA_HH_SQ + IRRIGATION + MACHINERY + mechanized_tilling  + STATE,
     data = _)
summary(reg_land)
```

Attention : Pour cette régression, c'est normal que mechanized_tilling soit NA, car machinery_tilling et MACHINERY sont identiques. R ne considère pas le deuxième coefficient, à cause du problème de colinéarité que cela causerait. 


```{r}
reg_harvest <- Cultivation_oper |>
  filter(OPERATION == "HARVESTING & THRESHING") |>
  lm(formula = HACRE_OPER ~ CASTE_GROUP + AREA_CROP + AREA_CROP_SQ + AREA_HH + AREA_HH_SQ + IRRIGATION + MACHINERY + mechanized_tilling  + STATE,
     data = _)
summary(reg_harvest)
```


```{r}
reg_weeding <- Cultivation_oper |>
  filter(OPERATION == "HAND WEEDING") |>
  lm(formula = HACRE_OPER ~ CASTE_GROUP + AREA_CROP + AREA_CROP_SQ + AREA_HH + AREA_HH_SQ + IRRIGATION + mechanized_tilling + STATE,
     data = _)
summary(reg_weeding)
```

Attention: Il faut enlever Machinery pour étudier Hand weeding, car cette opération n'est jamais mécanisé. Il n'y a qu'une seule modalité pour Machinery, donc R ne peut pas créer de dummies. 


```{r}
reg_trans <- Cultivation_oper |>
  filter(OPERATION == "TRANSPLANTING") |>
  lm(formula = HACRE_OPER ~ CASTE_GROUP + AREA_CROP + AREA_CROP_SQ + AREA_HH + AREA_HH_SQ + IRRIGATION + MACHINERY + mechanized_tilling + STATE,
     data = _)
summary(reg_trans)

```


#### Avec le min de variables explicatives

```{r}
reg_min <- lm(HACRE_OPER ~ CASTE_GROUP + AREA_CROP + AREA_CROP_SQ + AREA_HH + AREA_HH_SQ + STATE, data = Cultivation_oper)
summary(reg_min)
```

Variables nécessaires pour n'avoir aucune différence significative entre BC et FC: STATE + AREA_CROP ou AREA_HH


********************************************************************************

### Par type de travail

On refait les régressions précédentes, avec comme outcome les heures de travail par acre pour chaque type de travail (femme/homme, familial/employé).

On se conceentre sur le culture du riz (en Kharif). 

```{r}
Cultivation_labor <- Cultivation_labor |>
  filter(CROP == "PADDY")
```


#### FF: Travail féminin familial

En se concentrant sur le ratio Hr/acre pour le travail féminin familial, on regarde s'il y a une différence significative entre FC et BC, avec les mêmes variables de contrôle. Notre hypothèse est que la demande de travail familial féminin soit moindre pour les FC. 

```{r}
reg_FF <- lm(FF_HACRE ~ CASTE_GROUP + AREA_CROP + AREA_CROP_SQ + AREA_HH + AREA_HH_SQ + IRRIGATION + MACHINERY + mechanized_tilling  + STATE, data = Cultivation_labor)
summary(reg_FF)
```
Refaire cette régression sans MACHINERY, mechanized_tilling qui peuvent être des stratégies de substitution pour faire baisser FF


##### Hand weeding

```{r}
reg_FF <- Cultivation_labor |>
  filter(OPERATION == "HAND WEEDING") |>
  lm(FF_HACRE ~ CASTE_GROUP + AREA_CROP + AREA_CROP_SQ + AREA_HH + AREA_HH_SQ + IRRIGATION + mechanized_tilling  + STATE, data = _)
summary(reg_FF)
```

##### Harvesting

```{r}
reg_FF <- Cultivation_labor |>
  filter(OPERATION == "HARVESTING & THRESHING") |>
  lm(FF_HACRE ~ CASTE_GROUP + AREA_CROP + AREA_CROP_SQ + AREA_HH + AREA_HH_SQ + IRRIGATION + MACHINERY + mechanized_tilling  + STATE, data = _)
summary(reg_FF)
```

##### Transplanting

```{r}
reg_FF <- Cultivation_labor |>
  filter(OPERATION == "TRANSPLANTING") |>
  lm(FF_HACRE ~ CASTE_GROUP + AREA_CROP + AREA_CROP_SQ + AREA_HH + AREA_HH_SQ + IRRIGATION + MACHINERY + mechanized_tilling  + STATE, data = _)
summary(reg_FF)
```


#### HF: Travail féminin employé

```{r}
reg_HF <- lm(HF_HACRE ~ CASTE_GROUP + AREA_CROP + AREA_CROP_SQ + AREA_HH + AREA_HH_SQ + IRRIGATION + MACHINERY + mechanized_tilling  + STATE, data = Cultivation_labor)
summary(reg_HF)
```
Rajouter un dummy OPERATION pour les régressions toutes opérations confondues 


#### FM: Travail masculin familial

```{r}
reg_FM <- lm(FM_HACRE ~ CASTE_GROUP + AREA_CROP + AREA_CROP_SQ + AREA_HH + AREA_HH_SQ + IRRIGATION + MACHINERY + mechanized_tilling  + STATE, data = Cultivation_labor)
summary(reg_FM)
```

#### HM: Travail masculin employé

```{r}
reg_HM <- lm(HM_HACRE ~ CASTE_GROUP + AREA_CROP + AREA_CROP_SQ + AREA_HH + AREA_HH_SQ + IRRIGATION + MACHINERY + mechanized_tilling  + STATE, data = Cultivation_labor)
summary(reg_HM)
```


********************************************************************************

## Tableau de régression 

### Au niveau du ménage

First table:  Household level database only with villages whose main crop is rice.

– Reg 1: Outcome: Hours per acres of female family work in Kharif
– Reg 2: Outcome: Probability to cultivate rice in Kharif [Check if enough variation? Share of people that do not cultivate rice at all in these villages?]
– Reg 3: Outcome: Share of land allocated to rice in Kharif

Controls for Reg 1–3: Caste ; Total land ; Total Land sq ; Village dummies. 

```{r}
# Reg 1: Outcome: Hours per acres of female family work in Kharif
reg1_hh <- lm(FF_HACRE ~ CASTE_GROUP + AREA_HH + AREA_HH_SQ + VILLAGE, 
              data = Cultivation_hh)
summary(reg1_hh)
```

```{r}
# Reg 2: Outcome: Probability to cultivate rice in Kharif
reg2_hh <- lm(with_paddy ~ CASTE_GROUP + AREA_HH + AREA_HH_SQ + VILLAGE, data = Cultivation_hh)
summary(reg2_hh)
```

```{r}
# Reg 3: Outcome: Share of land allocated to rice in Kharif
reg3_hh <- lm(paddy_prct ~ CASTE_GROUP + AREA_HH + AREA_HH_SQ + VILLAGE, data = Cultivation_hh)
summary(reg3_hh)
```

*Tableau de régression au niveau du ménage*

```{r}
# Liste des modèles
models_hh <- list(
  "Female family labor (Hours/acre)" = reg1_hh,
  "Rice cultivation (Yes/No)" = reg2_hh,
  "Share land to rice" = reg3_hh
)

# Noms des variables
coef_map_hh <- c(
  "CASTE_GROUPFC" = "Caste: FC",
  "CASTE_GROUPSC" = "Caste: SC",
  "CASTE_GROUPST" = "Caste: ST",
  "AREA_HH" = "Household area",
  "AREA_HH_SQ" = "Area squared"
)

options("modelsummary_format_numeric_latex" = "plain")

# Création du tableau
modelsummary(
  models_hh,
  coef_map = coef_map_hh,
  gof_omit = "R2|Adj|AIC|BIC|F|Log|Std|RMSE",  # pour supprimer stats inutiles
  stars = TRUE,
  statistic = "({std.error})",             # erreur standard entre parenthèses
  add_rows = data.frame(
    Variable = "Village FE",
    `Hours/acre (Female)` = "Yes",
    `Rice cultivation (Yes/No)` = "Yes",
    `Share land to rice` = "Yes"
  ),
  output = "latex"  # ou "markdown"
)
```




********************************************************************************

### Au niveau du champ

Second table : Subplot level database, only with subplot planted with rice in Kharif with villages whose main crop is rice.
– Reg 4: Outcome : Probability to do hand weeding [Check if enough variation? Share of plot without “hand weeding operation"?]
– Reg 5: Outcome: Hours per acre hand weeding (those who do not do hand weeding = 0)
– Reg 6: Outcome: Quantity of herbicides per acre

Controls for Reg 4–6: Caste; Total land ; Total Land sq ; Plot size ; Plot size sq; Subplot size ; Subplot size sq; Village dummies ; Characteristics/Quality of land (at what level is it defined?)

```{r}
# Reg 4: Outcome : Probability to do hand weeding
reg4_plot <- Cultivation_oper |>
  filter(OPERATION == "HAND WEEDING",
         VILLAGE_CROP == "PADDY") |>
  lm(formula = hand_weeding ~ CASTE_GROUP + AREA_CROP + AREA_CROP_SQ + PLOT_AREA
     + PLOT_AREA_SQ + AREA_HH + AREA_HH_SQ + VILLAGE + SOIL_TYPE + SOIL_FERT 
     + SLOPE + SOIL_DEPTH + SOIL_DEGR, data = _)
summary(reg4_plot)
```

```{r}
# Reg 5: Outcome: Hours per acre hand weeding
reg5_plot <- Cultivation_oper |>
  filter(OPERATION == "HAND WEEDING",
         VILLAGE_CROP == "PADDY") |>
  lm(formula = HACRE_OPER ~ CASTE_GROUP + AREA_CROP + AREA_CROP_SQ + PLOT_AREA 
     + PLOT_AREA_SQ + AREA_HH + AREA_HH_SQ + VILLAGE + SOIL_TYPE + SOIL_FERT 
     + SLOPE + SOIL_DEPTH + SOIL_DEGR, data = _)
summary(reg5_plot)
```

*Tableau de régression au niveau du subplot*

```{r}
# Liste des modèles
models_subplot <- list(
  "Probability to do hand weeding" = reg4_plot,
  "labor in hand weeding (Hours/acre)" = reg5_plot
)

# Noms des variables
coef_map_subplot <- c(
  "CASTE_GROUPFC" = "Caste: FC",
  "CASTE_GROUPSC" = "Caste: SC",
  "CASTE_GROUPST" = "Caste: ST",
  "AREA_HH" = "Household area",
  "PLOT_AREA" = "Plot area",
  "AREA_CROP" = "Subplot area"
)

options("modelsummary_format_numeric_latex" = "plain")

# Création du tableau
modelsummary(
  models_subplot,
  coef_map = coef_map_subplot,
  gof_omit = "R2|Adj|AIC|BIC|F|Log|Std|RMSE",  # pour supprimer stats inutiles
  stars = TRUE,
  statistic = "({std.error})",             # erreur standard entre parenthèses
  add_rows = data.frame(
    Variable = "Village FE",
    `Probability to do hand weeding` = "Yes",
    `Labor in wand weeding (Hours/acre)` = "Yes"
  ),
  output = "latex"  # ou "markdown"
)
```


********************************************************************************

### Au niveau de l'opération

SubPlot X Operation level database, only with subplot planted with rice in kharif with villages whose main crop is rice. Without Hand Weeding, and other operations where mechanization is irrelevant (for example
“marketing")
– Reg 7: Outcome: Probability of mechanizing the operation
– Reg 8: Outcome: Nb of hours of hired labor per acre

Controls Reg 7–8: Caste; Total land ; Total Land sq ; Plot size ; Plot size sq; Subplot size ; Subplot size sq; Village dummies ; Characteristics/Quality of land (at what level is it defined?) ; Operation dummies

Additional control for Reg 8: Dummy that indicates whether the operation is mechanized.

```{r}
# Filtrer pour les champs de riz dans les villages dont la culture dominante est le riz
Cultivation_spe_oper <- Cultivation_labor |>
  filter(VILLAGE_CROP == "PADDY",
         CROP == "PADDY") |>
  
# Conserver seulement les opérations d'intérêt
  filter(OPERATION %in% c("LAND PREPARATION", "HARVESTING & THRESHING", "TRANSAPLANTING", "PLANT PROTECTION MEASURES", "FERTILIZER APPL.", "IRRIGATION", "SEED SOWING", "INTERCULTURE"))
```

```{r}
# Reg 7: Outcome: Probability of mechanizing the operation
reg7_oper <- lm(MACHINERY ~ CASTE_GROUP + AREA_CROP + AREA_CROP_SQ + PLOT_AREA 
                + PLOT_AREA_SQ + AREA_HH + AREA_HH_SQ + OPERATION + VILLAGE 
                + SOIL_TYPE + SOIL_FERT + SLOPE + SOIL_DEPTH + SOIL_DEGR, 
                data = Cultivation_spe_oper)
summary(reg7_oper)
```

```{r}
# Reg 8: Outcome: Nb of hours of hired labor per acre
reg8_oper <- lm(hired_work_hacre ~ CASTE_GROUP + AREA_CROP + AREA_CROP_SQ 
                + PLOT_AREA + PLOT_AREA_SQ + AREA_HH + AREA_HH_SQ + OPERATION 
                + VILLAGE + SOIL_TYPE + SOIL_FERT + SLOPE + SOIL_DEPTH 
                + SOIL_DEGR + MACHINERY, data = Cultivation_spe_oper)
summary(reg8_oper)
```

*Tableau de régression au niveau d'opération*

```{r}
models_oper <- list(
  "Probability of mechanizing the operation" = reg7_oper,
  "Hired labor (Hours/acre)" = reg8_oper
)

# Noms des variables
coef_map_oper <- c(
  "CASTE_GROUPFC" = "Caste: FC",
  "CASTE_GROUPSC" = "Caste: SC",
  "CASTE_GROUPST" = "Caste: ST",
  "AREA_HH" = "Household area",
  "PLOT_AREA" = "Plot area",
  "AREA_CROP" = "Subplot area",
  "MACHINERYTRUE" = "Mecanised"
)

options("modelsummary_format_numeric_latex" = "plain")

# Création du tableau
modelsummary(
  models_oper,
  coef_map = coef_map_oper,
  gof_omit = "R2|Adj|AIC|BIC|F|Log|Std|RMSE",  # pour supprimer stats inutiles
  stars = TRUE,
  statistic = "({std.error})",             # erreur standard entre parenthèses
  add_rows = data.frame(
    Variable = c("Village FE", "Operation FE", "Soil characteristics FE"),
    `Probability of mechanizing the operation` = c("Yes", "Yes", "Yes"),
    `Hired labor (Hours/acre)` = c("Yes", "Yes", "Yes")
  ),
  output = "latex"  # ou "markdown"
)
```



********************************************************************************

## Potentiels facteurs de confusion

On regroupe dans un tableau les facteurs susceptibles de confondre les résultats de la régression. J'indique la moyenne et l'écar-type pour chaque variable, pour l'ensemble des champs et par caste. 

On se concentre sur la culture du riz en Kharif. 

Liste des variables : 
- total land size ; (je me base sur PlotList) 
- plot size ; (pour l'instant, je ne peux pas le calculer)
- subplot size ; (j'utilise Cultivation_expand)
- number of subdivision of plot per household ; 
- use of tractors, threshers, sprayers ; (proba (0/1) de ménages)
- irrigation ;
- HYV use ; 
- productivity : production of rice per acre ; (faut remettre les variables OP et gérer les doublons)
- hours worked for each labor type. 

Pour avoir la différence entre plot size et subplot size, je me base sur la table PlotList dans laquelle cette distinction est indiquée par ménage. 


### Correspondance des champs entre Plotlist et Cultivation_paddy 

Je vérifie les couples (VDS_ID, AREA_CROP, PLOT_CODE) dans Cultivation_paddy en les comparant à soit PLOT_CODE soit SUB_PLOT_CODE dans PlotList.

```{r Correspondance Cultivation_paddy -> Plotlist}
# Préparer les clés de Cultivation_paddy
cultivation_keys <- Cultivation_paddy |>
  mutate(AREA_CROP = round(AREA_CROP, 2)) |>
  select(VDS_ID, PLOT_CODE, SUB_PLOT_CODE, AREA_CROP) |>
  distinct()

# Préparer les clés de PlotList en utilisant PLOT_CODE et SUB_PLOT_CODE
plotlist_keys <- PlotList |>
  mutate(AREA_CROP = round(CROP_AREA, 2),
         AREA_CROP = if_else(is.na(AREA_CROP), PLOT_AREA, AREA_CROP)) |>
  select(VDS_ID, PLOT_CODE, SUB_PLOT_CODE, AREA_CROP) |>
  distinct()

# Identifier les lignes dans Cultivation_paddy qui n'ont aucun match
non_match <- anti_join(
  cultivation_keys,
  plotlist_keys,
  by = c("VDS_ID", "PLOT_CODE", "SUB_PLOT_CODE", "AREA_CROP")
)

n_non_matched <- nrow(non_match)
n_total <- nrow(cultivation_keys)
prop_non_matched <- round(n_non_matched / n_total * 100, 2)

cat(" - Total de champs dans Cultivation_paddy :", n_total, "\n")
cat(" - Champs sans correspondance dans PlotList :", n_non_matched, "\n")
cat(" - Proportion sans correspondance :", prop_non_matched, "%\n")
```

### Comparaison de la superficie par ménage entre les 2 tables

Je compare la superficie totale par ménage (tous les champs du ménage), pour vérifier s'il y a des incohérences entre les 2 tables.

```{r Correspondance des superficies par ménage}
# Identifier les champs pour lesquels AREA_HH diffère entre les 2 tables
non_area_hh <- anti_join(Cultivation_paddy |> distinct(VDS_ID, AREA_HH), plotlist_area_hh, by = c("VDS_ID", "AREA_HH"))

n_non_area_hh <- nrow(non_area_hh)
n_total <- Cultivation_paddy |> distinct(VDS_ID, AREA_HH) |> nrow()
prop_non_area <- round(n_non_area_hh / n_total * 100, 2)

cat(" - Ménages dans Cultivation_paddy :", n_total, "\n")
cat(" - Ménages sans équivalent dans PlotList :", n_non_area_hh, "\n")
cat(" - Proportion sans équivalent :", prop_non_area, "%\n")
```

### Tableau des facteurs

```{r}
# 1. Somme des heures de travail par champ, pour tout LAB_TYPE
all_factors <- Cultivation_paddy |>
  filter(AREA_CROP != 0) |>
  group_by(across(-WORK_HR)) |>
  summarise(TOTAL_HOURS = sum(WORK_HR, na.rm = TRUE), .groups = "drop") |>

# 2. Pivoter et créer les valeurs 0 quand le travail est nul
  pivot_wider(
    names_from = LAB_TYPE,
    values_from = TOTAL_HOURS,
    values_fill = 0
  ) |>

# 3. Calculer le travail total selon le genre
  mutate(
    WORK_F = HF + FF,
    WORK_M = HM + FM,
    WORK_O = OB + FB + EB,
    ALL_WORK = HF + FF + HM + FM + OB + FB + EB + EM + EF + HC + FC + RS
  ) |>
  select(-c(RS, HC, FC, EF, EM, HB, OB, EB, FB, MACHINERY))
```

```{r}
# Additionner les heures de travail par champ et par lab_type (toutes opérations confondues)
all_factors <- all_factors |>
  group_by(VDS_ID, CASTE_GROUP, PLOT_CODE, SUB_PLOT_CODE, PLOT_AREA, AREA_CROP, AREA_HH, IRRIGATION, VAR_TYPE) |>
  summarise(
    FM = sum(FM),
    HM = sum(HM),
    WORK_M = sum(WORK_M),
    HF = sum(HF),
    FF = sum(FF),
    WORK_F = sum(WORK_F),
    WORK_O = sum(WORK_O),
    ALL_WORK = sum(ALL_WORK),
    .groups = "drop"
  ) |>

# Calculer le ratio Hr/acre pour chaque lab_type
  mutate(
    FM = FM/AREA_CROP,
    HM = HM/AREA_CROP,
    WORK_M = WORK_M/AREA_CROP,
    HF = HF/AREA_CROP,
    FF = FF/AREA_CROP,
    WORK_F = WORK_F/AREA_CROP,
    WORK_O = WORK_O/AREA_CROP,
    ALL_WORK = ALL_WORK/AREA_CROP
  ) |>

# Modifier Var_type = 1 if HYV, 0 sinon
  mutate(
    VAR_TYPE = as.numeric(as.character(VAR_TYPE)),
    VAR_TYPE = replace_na(VAR_TYPE, 0),
    VAR_TYPE = if_else(VAR_TYPE == 2, 1, 0)
  ) |>

# Harmoniser les colonnes en numérique
  mutate(
    IRRIGATION = as.numeric(as.character(IRRIGATION))
    )
```

```{r}
# Pivoter la table en long
all_factors_long <- all_factors |>
  pivot_longer(cols = c(AREA_CROP, PLOT_AREA, AREA_HH, IRRIGATION, VAR_TYPE, ALL_WORK, FM, HM, HF, FF), names_to = "variable", values_to = "value")
```


*Créer le tableau statistique*

```{r}
# Calculer les statistiques par caste
table_factors_caste <- all_factors_long |>
  filter(!is.na(CASTE_GROUP)) |>
  group_by(variable, CASTE_GROUP) |>
  summarise(
    mean = mean(value, na.rm = TRUE),
    sd = sd(value, na.rm = TRUE),
    n = n(),
    .groups = "drop"
  ) |>
  mutate(caste_col = paste0(CASTE_GROUP)) |>
  select(-CASTE_GROUP) |>
  pivot_wider(
    names_from = caste_col,
    values_from = c(mean, sd, n),
    names_glue = "{caste_col}_{.value}"
  )

# Ajouter les statistiques pour l'ensemble des champs (toutes castes confondues)
table_factors_total <- all_factors_long |>
  group_by(variable) |>
  summarise(
    mean_total = mean(value, na.rm = TRUE),
    sd_total = sd(value, na.rm = TRUE),
    n_total = n(),
    .groups = "drop"
  ) |>
  rename(
    total_mean = mean_total,
    total_sd = sd_total,
    total_n = n_total
  )

# Fusionner les deux tables
table_factors <- left_join(table_factors_total, table_factors_caste, by = "variable")
```

```{r}
# Modifier le format de la table pour présenter les castes par colonne et de combiner mean et sd dans une seule cellule

# Créer une colonne caste
table_formatted <- table_factors |>
  pivot_longer(
    cols = -variable,  
    names_to = c("caste", "measure"),
    names_sep = "_",
    values_to = "value"
  ) |>
  
# Garder seulement mean et sd et les mettre côte à côte
  filter(measure %in% c("mean", "sd")) |>
  pivot_wider(
    names_from = measure,
    values_from = value
  ) |>

# Regrouper les deux en une colonne "mean (sd)"
  mutate(mean_sd = sprintf("%.2f (%.2f)", mean, sd)) |>
  select(variable, caste, mean_sd) |>
  pivot_wider(
    names_from = caste,
    values_from = mean_sd
  ) |>

# Changer l'ordre des colonnes
  select(variable, total, FC, BC, SC, ST)

# Ajouter le nombre d'observations 
n_row <- table_factors |>
  select(ends_with("_n")) |>
  slice(1) |>  
  # on conserve une ligne par colonne, puisque les valeurs sont identiques
  rename_with(~ gsub("_n", "", .x)) |>  
  # on enlève "_n" pour correspondre aux noms de caste
  mutate(variable = "Observations") |>
  select(variable, total, FC, BC, SC, ST) |> # réordonner les colonnes
  mutate(across(c(total, FC, BC, SC, ST), as.character))

table_formatted <- bind_rows(table_formatted, n_row) # joindre au tableau 
```


*Statistiques 1 : Heures de travail par acre*

```{r}
# Tableau 1 : Statistiques sur les heures de travail par acre
table_formatted_1 <- table_formatted |>
  rename(`All household` = total) |>
  filter(variable %in% c("ALL_WORK", "FF", "FM", "HF", "HM", "Observations")) |>
  mutate(variable = recode(variable,
                      `ALL_WORK` = "Total labor",
                      `FF` = "Female family labor",
                      `HF` = "Female hired labor",
                      `HM` = "Male hired labor",
                      `FM` = "Male family labor")
  )

# Affichage en latex 
sink("stats1_labor.tex")
print(table_formatted_1, include.rownames = FALSE, sanitize.text.function = identity)
sink()
```


*Statistiques 2 : Heures de travail par acre*

```{r}
# Tableau 2 : Superficie et characteristiques du champ
table_formatted_2 <- table_formatted |>
  rename(`All household` = total) |>
  filter(variable %in% c("AREA_HH", "PLOT_AREA", "AREA_CROP", "IRRIGATION", "VAR_TYPE", "Observations")) |>
  mutate(variable = recode(variable,
                      `AREA_HH` = "Household area",
                      `PLOT_AREA` = "Plot area",
                      `AREA_CROP` = "Subplot area",
                      `IRRIGATION` = "Irrigation",
                      `VAR_TYPE` = "HYV")
  )

order_plot <- c("Household area", 
                "Plot area", 
                "Subplot area", 
                "Irrigation", 
                "HYV")

table_formatted_2 <- table_formatted_2[match(order_plot, table_formatted_2$variable), ]

# Affichage en latex 
stats2 <- xtable(table_formatted_2, align = "lcccccc")

sink("stats2_plot.tex")
print(stats2, include.rownames = FALSE, sanitize.text.function = identity)
sink()
```











AFFICHAGE DU TABLEAU EN LATEX : 

print(xtable(table_final, align = "lccccc"), include.rownames = FALSE, sanitize.text.function = identity)

data <- fread('Example.csv')
print(xtable(data, type='latex'))



