---
title: "Fichier 2 (V2) : Création de variables"
format: html
editor: source
params:
  annee: 2011  # par défaut
---

```{r cleaning, message=FALSE, warning=FALSE}
rm(list = setdiff(ls(), "params"))
graphics.off()
cat("\014")
```

```{r library}
#| message: false
here::i_am("ICRESAT_database_analysis/CultData2_cleaning.qmd")
library(dplyr)
library(tidyr)
library(knitr)
library(readxl)
library(ggplot2)
library(scales)
library(stringr)    
library(gt)
library(here)
```

```{r import_data}
annee <- params$annee
cat("Année :", annee, "\n")

data_to_import <- paste0("Cultivation_wide_", annee, ".rds")
Cultivation_wide <- readRDS(here::here("Base de données générées", "Cultivation_wide", data_to_import))
```


********************************************************************************

# Pivoter en long Cultivation

Les subplots, avec différentes cultures, sont pour certains sous_divisés suivant la variable PRCT. Je recalcule les vraiables associées au subplot suivant ce pourcentage. 

```{r func_numerique}
# Convertir les variables en numérique
convertir_num <- function(df, cols) {
  df[cols] <- lapply(df[cols], function(x) as.numeric(as.character(x)))
  return(df)
}

Cultivation_wide <- convertir_num(Cultivation_wide, c("PRCT_AREA_1", "PRCT_AREA_2", "PRCT_AREA_3", "PRCT_AREA_4"))
```

```{r pivot_longer}
# Variables à faire pivoter en long
var_prefixes <- c(
  "CROP_AREA", "IRRI_AREA",
  paste0("WORK_HR_", c("HM", "FM", "FF", "HF", "HC", "OB", "RS", "EF", "HB", "EM", "FC", "EB")),
  paste0("WAGE_", c("HM", "FM", "FF", "HF", "HC", "OB", "RS", "EF", "HB", "EM", "FC", "EB")),
  paste0("HACRE_", c("HM", "FM", "FF", "HF", "HC", "OB", "RS", "EF", "HB", "EM", "FC", "EB"))
)

cols_to_pivot <- paste0("^(", paste(
  c("CROP", "PRCT_AREA", "OP_MAIN_PROD_QTY", "OP_MAIN_PROD_UNIT", "VAR_NAME", "VAR_TYPE"),
  collapse = "|"
), ")_[1-4]$")

Cultivation_long <- Cultivation_wide |>
  pivot_longer(
    cols = matches(cols_to_pivot),
    names_to = c(".value", "NB"),
    names_pattern = "(.*)_(\\d)"
  ) |>

# Supprimer les lignes qui n'ont pas de crop, soit PRCT_AREA == 0
  filter(!is.na(PRCT_AREA))
```

```{r apply_prct}
# Variables auxquelles appliquer PRCT_AREA
var_prefixes <- c(
  "CROP_AREA", "IRRI_AREA",
  paste0("WORK_HR_", c("HM", "FM", "FF", "HF", "HC", "OB", "RS", "EF", "HB", "EM", "FC", "EB")),
  paste0("WAGE_",     c("HM", "FM", "FF", "HF", "HC", "OB", "RS", "EF", "HB", "EM", "FC", "EB")),
  paste0("HACRE_",    c("HM", "FM", "FF", "HF", "HC", "OB", "RS", "EF", "HB", "EM", "FC", "EB"))
)

vars_existantes <- intersect(var_prefixes, colnames(Cultivation_long))

# Appliquer PRCT_AREA aux colonnes existantes
Cultivation_long <- Cultivation_long |>
  mutate(across(
    all_of(vars_existantes),
    ~ ifelse(is.na(PRCT_AREA) | PRCT_AREA == 0, NA_real_, .x * PRCT_AREA / 100)
  )) |>
  
  select(-NB) |>
  relocate(CROP_AREA, .after = PLOT_AREA) |>
  relocate(IRRI_AREA, .after = CROP_AREA) |>
  relocate(VAR_TYPE, .before = VAR_NAME)
```


********************************************************************************

# Modifier la base

## Ajouter des variables

*Month*

```{r add_month}
Cultivation_long <- Cultivation_long |>
  mutate(MONTH = substr(SUR_MON_YR, 1, 2)) |>
  mutate(
    MONTH = recode(MONTH,
                      `01` = "janv",
                      `02` = "feb",
                      `03` = "march",
                      `04` = "april",
                      `05` = "may",
                      `06` = "june",
                      `07` = "july",
                      `08` = "aug",
                      `09` = "sept",
                      `10` = "oct",
                      `11` = "nov",
                      `12` = "dec")
  )
```


REVOIR LES VARIABLES GENDER ET EMPLOYMENT !

*Gender*
J'intégre le travail fait par les bullocks dans le travail des hommes, puisque cela inclut le conducteur. 

Cultivation_long <- Cultivation_long |>
  mutate(
    GENDER = case_when(
      (WORK_HR_HF != 0 | WORK_HR_FF != 0 | WORK_HR_EF != 0) ~ "Female",
      (WORK_HR_HM != 0 | WORK_HR_FM != 0 | WORK_HR_EM != 0 | WORK_HR_OB != 0 
       | WORK_HR_HB != 0 | WORK_HR_EB != 0) ~ "Male",
      (WORK_HR_HC != 0 | WORK_HR_FC != 0) ~ "Child",
      TRUE ~ NA_character_
    )
  )


*Employment*
Cultivation_long <- Cultivation_long |>
  mutate(
    EMPLOYMENT = case_when(
      (WORK_HR_HF != 0 | WORK_HR_HC != 0 | WORK_HR_HM != 0) ~ "Hired",
      (WORK_HR_FM != 0 | WORK_HR_FF != 0 | WORK_HR_FC != 0) ~ "Family",
      (WORK_HR_EM != 0 | WORK_HR_EF != 0) ~ "Exchange",
      TRUE ~ NA_character_
    )
  )


*Village*

```{r add_village}
Cultivation_long <- Cultivation_long |>
  mutate(VILLAGE = substr(VDS_ID, 2, 6))
```


*Culture dominante par village*

Je détermine quelle est la culture la plus répandue (en Kharif) par village.
L'objectif est d'identifier les villages dont la culture dominante en Kharif est le riz.

```{r add_village_crop}
first_crop_village <- Cultivation_long |>
  filter(CROP != "SEASONAL FALLOW") |>
  distinct(VDS_ID, SUB_PLOT_CODE, VILLAGE, CROP, SEASON) |>
  count(VILLAGE, SEASON, CROP, name = "n") |>
  group_by(VILLAGE, SEASON) |>
  arrange(desc(n)) |>
  mutate(rank = row_number()) |>
  ungroup() |>
  filter(rank == 1) |>
  rename(VILLAGE_CROP = CROP)

# Ajouter la culture dominante par village à la base principale
Cultivation_long <- Cultivation_long |>
  left_join(first_crop_village |> select(-c(n, rank)), by = c("VILLAGE", "SEASON"))
```


*Ménages cultivant du riz*

J'identifie les ménages ayant au moins un champ de riz par saison (peu importe la superficie). 

```{r add_with_paddy}
households_with_paddy <- Cultivation_long |>
  distinct(VDS_ID, PLOT_CODE, SUB_PLOT_CODE, CROP, SEASON) |>
  group_by(VDS_ID, SEASON) |>
  mutate(with_paddy = any(CROP == "PADDY")) |>
  ungroup() |>
  distinct(VDS_ID, SEASON, with_paddy)

# Ajouter la variable à la base principale par ménage et saison
Cultivation_long <- Cultivation_long |>
  left_join(households_with_paddy, by = c("VDS_ID", "SEASON"))
```


*Pourcentage de la terre dédié au riz*

Je définie maintenant la part de la terre du ménage (somme de tous ses champs) dédiée à la culture du riz par saison. 

```{r add_prct_paddy}
# Superficie et part de la terre dédiée au riz, par saison
paddy_area <- Cultivation_long |>
  distinct(VDS_ID, PLOT_CODE, SUB_PLOT_CODE, CROP, CROP_AREA, SEASON) |>
  group_by(VDS_ID, SEASON) |>
  summarise(
    AREA_HH = sum(CROP_AREA, na.rm = TRUE),
    paddy_area = sum(CROP_AREA[CROP == "PADDY"], na.rm = TRUE),
    .groups = "drop"
  ) |>
  mutate(paddy_prct = round(100 * paddy_area / AREA_HH, 0))

# Joindre prct_paddy à la base principale
Cultivation_long <- Cultivation_long |>
  left_join(paddy_area, by = c("VDS_ID", "SEASON"))
```


*Irrigation*

```{r add_irrigation}
Cultivation_long <- Cultivation_long |>
  mutate(PER_IRRI = round(100 * IRRI_AREA / CROP_AREA, 2),
         PER_IRRI = if_else(PER_IRRI>100, 100, PER_IRRI),
         IRRIGATION = case_when(
           PER_IRRI>49 ~ "Irrigué",
           PER_IRRI<50 ~ "Non irrigué"
           )
         ) |>
  select(-PER_IRRI)
```


*Mécanisation*

Je crée la variable mechanized, qui indique pour chaque opération si une machine a été utilisée (TR, SP, DS, SM, PT, ET, CH, TH, SD, MK, DP, AUTO ou CYCLE WEEDER). 

```{r add_mechanized}
mechanized <- Cultivation_long |>
  mutate(is_machinery = rowSums(across(contains("TYPE_MAT"), ~ .x == "MACHINERY"), na.rm = TRUE) > 0) |>
  group_by(VDS_ID, PLOT_CODE, SUB_PLOT_CODE, CROP_AREA, CROP, SEASON, OPERATION) |>
  summarise(mechanized = any(is_machinery), .groups = "drop")

# Ajouter la variable à Cultivation_long
Cultivation_long <- Cultivation_long |>
  left_join(mechanized, by = c("VDS_ID", "PLOT_CODE", "SUB_PLOT_CODE", "CROP_AREA", "CROP", "SEASON", "OPERATION"))
```


faire la même chose pour chaqe type de typemat : fertilizer, pesticide, weedicide/herbicide

puis crééer des variables binaires :hand weeding ()




*Labour mécanisé par saison*

```{r add_mechanized_tilling}
mechanized_tilling <- Cultivation_long |> 
  filter(OPERATION == "LAND PREPARATION") |>

# Identifier les champs mécanisant land preparation 
  group_by(VDS_ID, PLOT_CODE, SUB_PLOT_CODE, CROP_AREA, CROP, SEASON) |>
  summarise(mechanized_tilling = any(mechanized), .groups = "drop")

# Ajouter la variable à Cultivation_long
Cultivation_long <- Cultivation_long |>
  left_join(mechanized_tilling, by = c("VDS_ID", "PLOT_CODE", "SUB_PLOT_CODE", "CROP_AREA", "CROP", "SEASON"))
```


*Travail total (tout type de travail confondu)*

```{r add_work_t}
cols_work_hr <- c(paste0("WORK_HR_", c("HM", "FM", "FF", "HF", "HC", "OB", "RS", "EF", "HB", "EM", "FC", "EB")))

Cultivation_long[cols_work_hr] <- lapply(Cultivation_long[cols_work_hr], function(x) ifelse(is.na(x), 0, x))

Cultivation_long <- Cultivation_long |>
  mutate(WORK_HR_T = rowSums(across(all_of(cols_work_hr))),
         HACRE_T = WORK_HR_T/CROP_AREA)
```


*Champs faisant du hand weeding par saison*

A REVOIR!

hand_weeding <- Cultivation_long |>
  filter(OPERATION == "WEEDING") |>

Identifier les champs faisant du hand weeding
  select(WORK_HR_T, VDS_ID, PLOT_CODE, SUB_PLOT_CODE, CROP, SEASON) |>
  mutate(hand_weeding = if_else(WORK_HR_T == 0, FALSE, TRUE)) |>
  distinct(VDS_ID, PLOT_CODE, SUB_PLOT_CODE, CROP, SEASON, hand_weeding)

Ajouter la variable à Cultivation_long
Cultivation_long <- Cultivation_long |>
  left_join(hand_weeding, by = c("VDS_ID", "PLOT_CODE", "SUB_PLOT_CODE", "CROP", "SEASON"))


## Ordre des variables

```{r reorder_vars}
Cultivation_long <- Cultivation_long |>
  select(
    SEASON, SUR_MON_YR, MONTH, VDS_ID, CASTE, CASTE_GROUP, PLOT_CODE, SUB_PLOT_CODE, CROP, AREA_HH, PLOT_AREA, CROP_AREA, IRRI_AREA, IRRIGATION, DT_OPER, OPERATION, mechanized, REGION, STATE, VILLAGE, VILLAGE_CROP, everything()  
    # place les colonnes restantes à la fin
  )

# Convertir les variables en numérique
Cultivation_long <- convertir_num(Cultivation_long, c("SOIL_DEPTH", "SOIL_FERT", "SLOPE"))
```


********************************************************************************

## Modifier Cultivation : créer les lignes pour les opérations non complétées

On estime que si une opération n'est pas complétée pour un mois et un champ donnés, alors son temps de travail est égal à 0. Le but est de créer une base qui indique WORK_HR = 0 pour toutes les opérations pas complétées pour un mois (MONTH) et un champ donnée (VDS_ID, PLOT_CODE, SEASON)

La base full_operation regroupe tous les couples existants VDS_ID / SUB_PLOT_CODE / CROP / SEASON (pour identifier de façon unique un champ) en ajoutant les combinaisons possibles de OPERATION.

J'ajoute d'autres variables qui ne servent pas à identifier le champ mais que je souhaite indiquer dans tous les lignes d'un même champ. 

```{r table_expand_oper}
plots_by_household <- Cultivation_long |>
  distinct(
    VDS_ID, CASTE, CASTE_GROUP, PLOT_CODE, SUB_PLOT_CODE, SEASON, CROP,
    AREA_HH, PLOT_AREA, CROP_AREA, IRRI_AREA, IRRIGATION, VAR_TYPE, VAR_NAME, 
    REGION, STATE, VILLAGE, VILLAGE_CROP, with_paddy, paddy_prct, mechanized_tilling,
    SOIL_TYPE, SOIL_TYPE_OT, SOIL_DEPTH, SOIL_FERT, SLOPE, SOIL_DEGR,
    RENT_FOR, OW_STAT, OP_MAIN_PROD_QTY, OP_MAIN_PROD_UNIT
           )

full_operation <- expand_grid(
  plots_by_household,
  OPERATION = unique(Cultivation_long$OPERATION)
)
```

Avec le code suivant, les doublons sont bien conservés puisque toutes les lignes sont repliquées dans le cas de doublons avec le couple (VDS_ID, PLOT_CODE, CROP, SEASON, OPERATION).

```{r apply_expand_oper, message=FALSE, warning=FALSE}
pattern_vars <- c("WORK_HR_", "WAGE_", "HACRE_", "TYPE_MAT_", "NAME_MAT_", 
                  "UNIT_MAT_", "QTY_MAT_", "VAL_MAT_", "RATE_MAT_", "SOURCE_MAT_")

# Extraire toutes les colonnes qui correspondent à l’un des motifs
cols_expand <- names(Cultivation_long)[
  sapply(pattern_vars, function(p) grepl(p, names(Cultivation_long))) |>
    apply(1, any)
]

base_to_join <- Cultivation_long |>
  select(
    VDS_ID, PLOT_CODE, SUB_PLOT_CODE, SEASON, CROP, OPERATION, 
    DT_OPER, SUR_MON_YR, mechanized, MONTH, cols_expand
  )

# Jointure sans conflit de colonnes
Cultivation_expand <- full_operation |>
  left_join(base_to_join, by = c("VDS_ID", "SUB_PLOT_CODE", "PLOT_CODE", "SEASON", "CROP", "OPERATION"))
```

```{r convertir_num_labor}
cols_labor <- c(
  paste0("WORK_HR_", c("HM", "FM", "FF", "HF", "HC", "OB", "RS", "EF", "HB", "EM", "FC", "EB", "T")),
  paste0("HACRE_", c("HM", "FM", "FF", "HF", "HC", "OB", "RS", "EF", "HB", "EM", "FC", "EB", "T"))
)

Cultivation_expand <- Cultivation_expand |>
  mutate(across(
    all_of(cols_labor),
    ~ if_else(is.na(DT_OPER), 0, .),
    .names = "{.col}"
  ))

Cultivation_expand <- convertir_num(Cultivation_expand, cols_labor)
```


********************************************************************************

# Construire les tables

Tables en long

## Tables sur le travail

*Au niveau de l'opération*

J'additionne les heures de travail par opération et saison pour un même champ, pour n'avoir qu'une seule ligne par champ pour chaque opération et type de travail distincts.

```{r table_labor_plot}
Table_labor_plot <- Cultivation_expand

sum_cols_labor <- function(df, group_vars, cols_to_sum) {
  df |>
    group_by(across(all_of(group_vars))) |>
    summarise(across(all_of(cols_to_sum), ~ sum(.x, na.rm = TRUE)), .groups = "drop")
}

group_vars <- c("VDS_ID", "CASTE_GROUP", "SEASON", "CROP", "PLOT_CODE", 
                "SUB_PLOT_CODE", "AREA_HH", "PLOT_AREA", "CROP_AREA", "IRRI_AREA",
                "IRRIGATION", "OPERATION", "mechanized", "mechanized_tilling", "REGION",
                "STATE", "VILLAGE", "VILLAGE_CROP", "with_paddy", "paddy_prct", 
                "VAR_TYPE", "VAR_NAME", "OP_MAIN_PROD_QTY", "OP_MAIN_PROD_UNIT",
                "SOIL_TYPE", "SOIL_DEPTH", "SOIL_FERT", "SOIL_DEGR", "SLOPE")

Table_labor_plot <- sum_cols_labor(Table_labor_plot, group_vars, cols_labor)
```


*Au niveau du ménage*

J'additionne les heures de travail (toutes opérations confondues) par champ et saison. 

```{r table_labor_hh}
Table_labor_hh <- Cultivation_expand

sum_cols_labor <- function(df, group_vars, cols_to_sum) {
  df |>
    group_by(across(all_of(group_vars))) |>
    summarise(across(all_of(cols_to_sum), ~ sum(.x, na.rm = TRUE)), .groups = "drop")
}

group_vars <- c("VDS_ID", "CASTE_GROUP", "SEASON", "CROP", "PLOT_CODE", 
                "SUB_PLOT_CODE", "AREA_HH", "PLOT_AREA", "CROP_AREA", "IRRI_AREA",
                "IRRIGATION", "mechanized_tilling", "REGION", "STATE", "VILLAGE", 
                "VILLAGE_CROP", "with_paddy", "paddy_prct", "VAR_TYPE", "VAR_NAME", 
                "OP_MAIN_PROD_QTY", "OP_MAIN_PROD_UNIT", "SOIL_TYPE", "SOIL_DEPTH", 
                "SOIL_FERT", "SOIL_DEGR", "SLOPE")

Table_labor_hh <- sum_cols_labor(Table_labor_hh, group_vars, cols_labor)
```



## Tables sur la mécanisation

```{r table_mat}
# Sélectionner les variables sur la mécanisation
Table_mat <- Cultivation_expand |>
  select(-contains(c("WORK", "HACRE", "WAGE")))
```


********************************************************************************

# Liens extérieurs

## Enregistrer Cultivation_expand

```{r save_cultivation_expand}
# Définir le chemin du dossier
folder_path <- here("Base de données générées", "Cultivation_expand")

# Créer le dossier s'il n'existe pas
if (!dir.exists(folder_path)) {
  dir.create(folder_path, recursive = TRUE)
}

# Ajouter l'année au nom de fichier
fichier_base <- paste0("Cultivation_expand_", annee)

# Enregistrer Cultivation_expand
write.csv(
  Cultivation_expand,
  file = file.path(folder_path, paste0(fichier_base, ".csv")),
  row.names = FALSE
)
saveRDS(
  Cultivation_expand,
  file = file.path(folder_path, paste0(fichier_base, ".rds"))
)
```


## Enregistrer Table_labor

```{r save_tables_labor}
# Définir le chemin du dossier
folder_path <- here("Base de données générées", "Table_labor")

# Créer le dossier s'il n'existe pas
if (!dir.exists(folder_path)) {
  dir.create(folder_path, recursive = TRUE)
}

# Enregistrer Table_labor_plot
name_table <- paste0("Table_labor_plot_", annee)
write.csv(
  Table_labor_plot,
  file = file.path(folder_path, paste0(name_table, ".csv")),
  row.names = FALSE
)
saveRDS(
  Table_labor_plot,
  file = file.path(folder_path, paste0(name_table, ".rds"))
)

# Enregistrer Table_labor_hh
name_table <- paste0("Table_labor_hh_", annee)
write.csv(
  Table_labor_hh,
  file = file.path(folder_path, paste0(name_table, ".csv")),
  row.names = FALSE
)
saveRDS(
  Table_labor_hh,
  file = file.path(folder_path, paste0(name_table, ".rds"))
)
```



